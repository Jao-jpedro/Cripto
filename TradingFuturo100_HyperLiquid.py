#!/usr/bin/env python3
"""
TradingFuturo100 - Sistema de Trading com configura√ß√µes Hyperliquid
Vers√£o adaptada para usar as configura√ß√µes do trading.py com Hyperliquid
Executa em modo simula√ß√£o local (LIVE_TRADING=0)
"""

import ccxt
import pandas as pd
import numpy as np
import ta
import time
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes da Hyperliquid (importadas do trading.py)
def get_hyperliquid_config():
    """Retorna configura√ß√£o da Hyperliquid baseada no trading.py"""
    dex_timeout = int(os.getenv("DEX_TIMEOUT_MS", "5000"))
    _wallet_env = os.getenv("WALLET_ADDRESS")
    _priv_env = os.getenv("HYPERLIQUID_PRIVATE_KEY")
    
    config = {
        "walletAddress": _wallet_env or "0x08183aa09eF03Cf8475D909F507606F5044cBdAB",
        "privateKey": _priv_env or "0x5d0d62a9eff697dd31e491ec34597b06021f88de31f56372ae549231545f0872",
        "enableRateLimit": True,
        "timeout": dex_timeout,
        "options": {"timeout": dex_timeout},
        "sandbox": False  # Usar testnet se necess√°rio
    }
    
    return config

class DataManager:
    """Gerenciador de dados - conecta √† Hyperliquid mas opera em modo simula√ß√£o"""
    
    def __init__(self, live_trading=False):
        self.live_trading = live_trading
        self.exchange = None
        
        if live_trading:
            # Configura√ß√£o para Hyperliquid
            config = get_hyperliquid_config()
            self.exchange = ccxt.hyperliquid(config)
            print(f"üîó Conectado √† Hyperliquid - Wallet: {config['walletAddress'][:10]}...")
        else:
            # Modo simula√ß√£o - usar Binance para dados hist√≥ricos
            self.exchange = ccxt.binance({
                'enableRateLimit': True,
                'sandbox': False
            })
            print("üìä Modo simula√ß√£o - usando Binance para dados hist√≥ricos")
    
    def get_historical_data(self, symbol: str, timeframe: str = '4h', limit: int = 1000, include_current: bool = False) -> pd.DataFrame:
        """Busca dados hist√≥ricos, incluindo candle atual se especificado"""
        try:
            if self.live_trading:
                # Para Hyperliquid, ajustar s√≠mbolo se necess√°rio
                hl_symbol = symbol.replace('USDT', 'USD')
                ohlcv = self.exchange.fetch_ohlcv(hl_symbol, timeframe, limit=limit)
            else:
                # Modo simula√ß√£o - usar Binance
                # Para incluir candle atual, buscar um a mais
                fetch_limit = limit + 1 if include_current else limit
                ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=fetch_limit)
            
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            return df
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar dados para {symbol}: {e}")
            return pd.DataFrame()
    
    def get_current_price(self, symbol: str) -> float:
        """Busca pre√ßo atual"""
        try:
            if self.live_trading:
                hl_symbol = symbol.replace('USDT', 'USD')
                ticker = self.exchange.fetch_ticker(hl_symbol)
            else:
                ticker = self.exchange.fetch_ticker(symbol)
            
            return float(ticker['last'])
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar pre√ßo de {symbol}: {e}")
            return 0.0

class SimpleStrategy:
    """Estrat√©gia simplificada baseada em EMA21 + RSI + Volume"""
    
    def __init__(self):
        self.name = "EMA21_RSI_Volume"
    
    def calculate_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """Calcula indicadores t√©cnicos"""
        df = df.copy()
        
        # EMA 21
        df['ema21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
        
        # RSI 14
        df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
        
        # Volume m√©dia 20 per√≠odos
        df['volume_ma20'] = df['volume'].rolling(window=20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_ma20']
        
        # ATR para volatilidade
        df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
        
        return df
    
    def generate_signals(self, df: pd.DataFrame) -> pd.DataFrame:
        """Gera sinais de compra/venda"""
        df = df.copy()
        df = self.calculate_indicators(df)
        
        # Condi√ß√µes mais permissivas para LONG
        long_conditions = (
            (df['close'] > df['ema21']) &  # Pre√ßo acima da EMA21
            (df['rsi'] < 75) &  # RSI n√£o muito sobrecomprado
            (df['rsi'] > 25) &  # RSI n√£o muito sobrevendido
            (df['volume_ratio'] > 0.8)  # Volume ligeiramente acima da m√©dia
        )
        
        # Condi√ß√µes mais permissivas para SHORT
        short_conditions = (
            (df['close'] < df['ema21']) &  # Pre√ßo abaixo da EMA21
            (df['rsi'] > 25) &  # RSI n√£o muito sobrevendido
            (df['rsi'] < 75) &  # RSI n√£o muito sobrecomprado
            (df['volume_ratio'] > 0.8)  # Volume ligeiramente acima da m√©dia
        )
        
        # Condi√ß√µes para SA√çDA (mais conservadoras)
        exit_long_conditions = (
            (df['close'] < df['ema21']) |  # Pre√ßo abaixo da EMA21
            (df['rsi'] > 80)  # RSI muito sobrecomprado
        )
        
        exit_short_conditions = (
            (df['close'] > df['ema21']) |  # Pre√ßo acima da EMA21
            (df['rsi'] < 20)  # RSI muito sobrevendido
        )
        
        df['signal'] = 0
        df.loc[long_conditions, 'signal'] = 1  # Compra
        df.loc[short_conditions, 'signal'] = -1  # Venda
        df.loc[exit_long_conditions, 'signal'] = -2  # Sair de LONG
        df.loc[exit_short_conditions, 'signal'] = 2  # Sair de SHORT
        
        return df

class Position:
    """Classe para gerenciar posi√ß√µes"""
    
    def __init__(self):
        self.side = None  # 'long' ou 'short'
        self.size = 0.0
        self.entry_price = 0.0
        self.entry_time = None
        self.unrealized_pnl = 0.0
        self.leverage = 10  # Alavancagem padr√£o
    
    def open_position(self, side: str, size: float, price: float, timestamp):
        """Abre uma nova posi√ß√£o"""
        self.side = side
        self.size = size
        self.entry_price = price
        self.entry_time = timestamp
        self.unrealized_pnl = 0.0
    
    def close_position(self):
        """Fecha a posi√ß√£o atual"""
        self.side = None
        self.size = 0.0
        self.entry_price = 0.0
        self.entry_time = None
        self.unrealized_pnl = 0.0
    
    def update_pnl(self, current_price: float):
        """Atualiza PnL n√£o realizado"""
        if self.side and self.size > 0:
            price_diff = current_price - self.entry_price
            if self.side == 'short':
                price_diff = -price_diff
            
            self.unrealized_pnl = (price_diff / self.entry_price) * 100 * self.leverage
    
    def is_open(self) -> bool:
        """Verifica se h√° posi√ß√£o aberta"""
        return self.side is not None and self.size > 0

class BacktestEngine:
    """Engine de backtesting"""
    
    def __init__(self, initial_capital: float = 10.0):
        self.initial_capital = initial_capital
        self.capital = initial_capital
        self.position = Position()
        self.trades = []
        self.equity_curve = []
        
    def execute_trade(self, signal: int, price: float, timestamp, symbol: str):
        """Executa uma opera√ß√£o baseada no sinal"""
        trade_size = 1.0  # Tamanho fixo por opera√ß√£o
        
        if signal == 1 and not self.position.is_open():  # Abrir LONG
            self.position.open_position('long', trade_size, price, timestamp)
            print(f"üü¢ LONG {symbol} @ {price:.6f} em {timestamp}")
            
        elif signal == -1 and not self.position.is_open():  # Abrir SHORT
            self.position.open_position('short', trade_size, price, timestamp)
            print(f"üî¥ SHORT {symbol} @ {price:.6f} em {timestamp}")
            
        elif signal == -2 and self.position.is_open() and self.position.side == 'long':  # Fechar LONG
            pnl_pct = self.position.unrealized_pnl
            pnl_dollar = (pnl_pct / 100) * self.capital
            self.capital += pnl_dollar
            
            trade_record = {
                'symbol': symbol,
                'side': 'long',
                'entry_price': self.position.entry_price,
                'exit_price': price,
                'entry_time': self.position.entry_time,
                'exit_time': timestamp,
                'pnl_pct': pnl_pct,
                'pnl_dollar': pnl_dollar
            }
            self.trades.append(trade_record)
            
            print(f"‚ùå Fechou LONG {symbol} @ {price:.6f} | PnL: {pnl_pct:.2f}% (${pnl_dollar:.2f})")
            self.position.close_position()
            
        elif signal == 2 and self.position.is_open() and self.position.side == 'short':  # Fechar SHORT
            pnl_pct = self.position.unrealized_pnl
            pnl_dollar = (pnl_pct / 100) * self.capital
            self.capital += pnl_dollar
            
            trade_record = {
                'symbol': symbol,
                'side': 'short',
                'entry_price': self.position.entry_price,
                'exit_price': price,
                'entry_time': self.position.entry_time,
                'exit_time': timestamp,
                'pnl_pct': pnl_pct,
                'pnl_dollar': pnl_dollar
            }
            self.trades.append(trade_record)
            
            print(f"‚ùå Fechou SHORT {symbol} @ {price:.6f} | PnL: {pnl_pct:.2f}% (${pnl_dollar:.2f})")
            self.position.close_position()
    
    def update_equity(self, current_price: float, timestamp):
        """Atualiza curva de equity"""
        current_equity = self.capital
        
        if self.position.is_open():
            self.position.update_pnl(current_price)
            unrealized_dollar = (self.position.unrealized_pnl / 100) * self.capital
            current_equity += unrealized_dollar
        
        self.equity_curve.append({
            'timestamp': timestamp,
            'equity': current_equity,
            'capital': self.capital,
            'unrealized_pnl': self.position.unrealized_pnl if self.position.is_open() else 0
        })
    
    def get_performance_stats(self) -> Dict:
        """Calcula estat√≠sticas de performance"""
        total_trades = len(self.trades)
        winning_trades = 0
        losing_trades = 0
        total_pnl = 0
        avg_win = 0
        avg_loss = 0
        
        if self.trades:
            df_trades = pd.DataFrame(self.trades)
            winning_trades = len(df_trades[df_trades['pnl_dollar'] > 0])
            losing_trades = len(df_trades[df_trades['pnl_dollar'] < 0])
            total_pnl = df_trades['pnl_dollar'].sum()
            avg_win = df_trades[df_trades['pnl_dollar'] > 0]['pnl_dollar'].mean() if winning_trades > 0 else 0
            avg_loss = df_trades[df_trades['pnl_dollar'] < 0]['pnl_dollar'].mean() if losing_trades > 0 else 0
        
        win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
        roi = ((self.capital - self.initial_capital) / self.initial_capital) * 100
        
        return {
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'losing_trades': losing_trades,
            'win_rate': win_rate,
            'total_pnl': total_pnl,
            'roi': roi,
            'final_capital': self.capital,
            'initial_capital': self.initial_capital,
            'avg_win': avg_win,
            'avg_loss': avg_loss
        }

class TradingFuturo100:
    """Sistema principal de trading"""
    
    def __init__(self, live_trading: bool = False):
        self.live_trading = live_trading
        self.data_manager = DataManager(live_trading)
        self.strategy = SimpleStrategy()
        self.backtest_engine = BacktestEngine()
        
        # S√≠mbolos para trading (todos os ativos do trading.py)
        self.symbols = [
            'BTC/USDT',  # Bitcoin
            'ETH/USDT',  # Ethereum  
            'SOL/USDT',  # Solana
            'XRP/USDT',  # Ripple
            'DOGE/USDT', # Dogecoin
            'AVAX/USDT', # Avalanche
            'ADA/USDT',  # Cardano
            'BNB/USDT',  # Binance Coin
            'SUI/USDT',  # Sui
            'ENA/USDT',  # Ethena
            'LINK/USDT', # Chainlink
            'AAVE/USDT', # Aave
            'CRV/USDT',  # Curve
            'LTC/USDT',  # Litecoin
            'NEAR/USDT', # Near Protocol
            'WLD/USDT',  # Worldcoin
            'HYPE/USDT', # Hype
            'PUMP/USDT', # Pump
            'AVNT/USDT'  # Avant
        ]
        
        # Arquivo para salvar trades em tempo real
        self.trades_file = f"trading_live_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.last_signals = {}  # Cache dos √∫ltimos sinais por s√≠mbolo
        
        print(f"üöÄ TradingFuturo100 inicializado")
        print(f"üìä Modo: {'LIVE TRADING' if live_trading else 'SIMULA√á√ÉO'}")
        print(f"üí∞ Capital inicial: ${self.backtest_engine.initial_capital}")
        print(f"üéØ Meta: >100% ROI")
        print(f"üíæ Log de trades: {self.trades_file}")
    
    def run_backtest(self):
        """Executa backtest completo"""
        print("\n" + "="*60)
        print("üîÑ INICIANDO BACKTEST")
        print("="*60)
        
        all_data = {}
        
        # Buscar dados para todos os s√≠mbolos
        for symbol in self.symbols:
            print(f"üì• Buscando dados para {symbol}...")
            df = self.data_manager.get_historical_data(symbol, '4h', 1000)
            
            if not df.empty:
                all_data[symbol] = df
                print(f"‚úÖ {symbol}: {len(df)} candles carregados")
            else:
                print(f"‚ùå {symbol}: Falha ao carregar dados")
        
        if not all_data:
            print("‚ùå Nenhum dado carregado. Abortando backtest.")
            return
        
        # Encontrar per√≠odo comum para todos os s√≠mbolos
        common_start = max(df.index.min() for df in all_data.values())
        common_end = min(df.index.max() for df in all_data.values())
        
        print(f"üìÖ Per√≠odo do backtest: {common_start} at√© {common_end}")
        print(f"‚è±Ô∏è Dura√ß√£o: {(common_end - common_start).days} dias")
        
        # Filtrar dados para per√≠odo comum
        for symbol in all_data:
            all_data[symbol] = all_data[symbol].loc[common_start:common_end]
        
        # Gerar sinais para todos os s√≠mbolos
        signals_data = {}
        for symbol, df in all_data.items():
            print(f"üîç Gerando sinais para {symbol}...")
            df_with_signals = self.strategy.generate_signals(df)
            signals_data[symbol] = df_with_signals
        
        # Execu√ß√£o do backtest
        print(f"\nüé¨ Executando backtest...")
        
        # Criar um √∫nico DataFrame com todos os timestamps
        all_timestamps = set()
        for df in signals_data.values():
            all_timestamps.update(df.index)
        
        all_timestamps = sorted(all_timestamps)
        
        trade_count = 0
        for timestamp in all_timestamps:
            # Para cada timestamp, verificar sinais de todos os s√≠mbolos
            for symbol, df in signals_data.items():
                if timestamp in df.index:
                    row = df.loc[timestamp]
                    signal = row['signal']
                    price = row['close']
                    
                    if signal != 0:
                        old_trade_count = len(self.backtest_engine.trades)
                        self.backtest_engine.execute_trade(signal, price, timestamp, symbol)
                        if len(self.backtest_engine.trades) > old_trade_count:
                            trade_count += 1
                    
                    # Atualizar equity com o √∫ltimo pre√ßo
                    self.backtest_engine.update_equity(price, timestamp)
        
        self.print_results()
    
    def print_results(self):
        """Imprime resultados do backtest"""
        stats = self.backtest_engine.get_performance_stats()
        
        print("\n" + "="*60)
        print("üìä RESULTADOS DO BACKTEST")
        print("="*60)
        
        print(f"üí∞ Capital inicial: ${stats['initial_capital']:.2f}")
        print(f"üí∞ Capital final: ${stats['final_capital']:.2f}")
        print(f"üìà ROI: {stats['roi']:.2f}%")
        print(f"üíµ PnL total: ${stats['total_pnl']:.2f}")
        print()
        print(f"üî¢ Total de trades: {stats['total_trades']}")
        print(f"‚úÖ Trades vencedores: {stats['winning_trades']}")
        print(f"‚ùå Trades perdedores: {stats['losing_trades']}")
        print(f"üéØ Taxa de acerto: {stats['win_rate']:.1f}%")
        
        if stats['winning_trades'] > 0:
            print(f"üíö Ganho m√©dio: ${stats['avg_win']:.2f}")
        if stats['losing_trades'] > 0:
            print(f"üíî Perda m√©dia: ${stats['avg_loss']:.2f}")
        
        print(f"\nüéØ Meta 100% ROI: {'‚úÖ ATINGIDA!' if stats['roi'] >= 100 else '‚ùå N√£o atingida'}")
        
        if stats['roi'] >= 100:
            print(f"üöÄ SUCESSO! ROI de {stats['roi']:.2f}% superou a meta!")
        
        # Salvar resultados
        self.save_results(stats)
    
    def save_results(self, stats: Dict):
        """Salva resultados em arquivo JSON"""
        results = {
            'timestamp': datetime.now().isoformat(),
            'strategy': self.strategy.name,
            'live_trading': self.live_trading,
            'symbols': self.symbols,
            'performance': stats,
            'trades': self.backtest_engine.trades
        }
        
        filename = f"trading_futuro100_hl_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w') as f:
                json.dump(results, f, indent=2, default=str)
            print(f"üíæ Resultados salvos em: {filename}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar resultados: {e}")
    
    def save_trade_log(self, trade_data: Dict):
        """Salva trade individual em tempo real"""
        try:
            # Tentar carregar arquivo existente
            try:
                with open(self.trades_file, 'r') as f:
                    data = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                data = {
                    'start_time': datetime.now().isoformat(),
                    'trades': [],
                    'performance': {
                        'total_trades': 0,
                        'roi': 0.0,
                        'capital': self.backtest_engine.initial_capital
                    }
                }
            
            # Adicionar novo trade
            data['trades'].append(trade_data)
            data['performance']['total_trades'] = len(data['trades'])
            data['performance']['capital'] = self.backtest_engine.capital
            data['performance']['roi'] = ((self.backtest_engine.capital - self.backtest_engine.initial_capital) / self.backtest_engine.initial_capital) * 100
            data['last_update'] = datetime.now().isoformat()
            
            # Salvar arquivo atualizado
            with open(self.trades_file, 'w') as f:
                json.dump(data, f, indent=2, default=str)
                
        except Exception as e:
            print(f"‚ùå Erro ao salvar trade log: {e}")
    
    def check_signals_and_trade(self, symbol: str) -> bool:
        """Verifica sinais para um s√≠mbolo e executa trade se necess√°rio"""
        check_time = datetime.now().strftime('%H:%M:%S')
        print(f"üîç [{check_time}] Verificando {symbol}...", end=' ')
        
        try:
            # Buscar dados incluindo candle atual
            df = self.data_manager.get_historical_data(symbol, '4h', 100, include_current=True)
            if df.empty:
                print("‚ùå Sem dados")
                return False
            
            print(f"‚úÖ {len(df)} candles", end=' ')
            
            # Gerar sinais
            df_signals = self.strategy.generate_signals(df)
            
            # Pegar √∫ltimo sinal
            latest_timestamp = df_signals.index[-1]
            latest_signal = df_signals['signal'].iloc[-1]
            latest_price = df_signals['close'].iloc[-1]
            latest_rsi = df_signals['rsi'].iloc[-1] if 'rsi' in df_signals.columns else 0
            latest_ema = df_signals['ema21'].iloc[-1] if 'ema21' in df_signals.columns else 0
            
            print(f"| Pre√ßo: ${latest_price:.6f} | RSI: {latest_rsi:.1f} | EMA21: ${latest_ema:.6f} | Sinal: {latest_signal}")
            
            # Verificar se √© um sinal novo (diferente do √∫ltimo cache)
            last_cached_signal = self.last_signals.get(symbol, 0)
            
            if latest_signal != 0 and latest_signal != last_cached_signal:
                print(f"üîî NOVO SINAL {symbol}: {latest_signal} @ {latest_price:.6f} em {latest_timestamp}")
                
                # Executar trade
                old_capital = self.backtest_engine.capital
                old_trade_count = len(self.backtest_engine.trades)
                
                self.backtest_engine.execute_trade(latest_signal, latest_price, latest_timestamp, symbol)
                
                # Verificar se realmente executou um trade
                if len(self.backtest_engine.trades) > old_trade_count:
                    new_trade = self.backtest_engine.trades[-1]
                    
                    # Salvar trade em tempo real
                    trade_log_data = {
                        'timestamp': datetime.now().isoformat(),
                        'symbol': symbol,
                        'signal': int(latest_signal),
                        'price': float(latest_price),
                        'candle_time': latest_timestamp.isoformat(),
                        'trade_data': new_trade,
                        'capital_before': float(old_capital),
                        'capital_after': float(self.backtest_engine.capital)
                    }
                    
                    self.save_trade_log(trade_log_data)
                    
                    # Cache do √∫ltimo sinal
                    self.last_signals[symbol] = latest_signal
                    return True
            
            # Atualizar cache mesmo se n√£o houve trade
            self.last_signals[symbol] = latest_signal
            
            # Atualizar equity
            self.backtest_engine.update_equity(latest_price, latest_timestamp)
            
            return False
            
        except Exception as e:
            print(f"‚ùå ERRO: {e}")
            return False
    
    def run_live_monitoring(self):
        """Executa monitoramento cont√≠nuo com candle em aberto"""
        print("\n" + "="*80)
        print("üî¥ MODO MONITORAMENTO CONT√çNUO")
        print("="*80)
        print("üìä Verificando movimenta√ß√µes em tempo real (incluindo candle aberto)")
        print("üíæ Salvando trades automaticamente quando ocorrerem")
        print("‚ö†Ô∏è Esta √© uma simula√ß√£o - nenhuma ordem real ser√° executada")
        print(f"üìù Log de trades: {self.trades_file}")
        print("‚è∞ Execu√ß√£o limitada a 8 minutos (reiniciar√° automaticamente)")
        print("üíì Heartbeat: sinais de vida a cada verifica√ß√£o")
        print("="*80)
        
        start_time = time.time()
        max_duration = 8 * 60  # 8 minutos em segundos
        cycle_count = 0
        total_checks = 0
        
        try:
            while True:
                cycle_count += 1
                cycle_start = time.time()
                elapsed_time = time.time() - start_time
                
                # Verificar se deve parar por tempo limite
                if elapsed_time >= max_duration:
                    print(f"\n‚è∞ Limite de tempo atingido ({max_duration/60:.1f} min). Finalizando execu√ß√£o...")
                    break
                
                trades_this_cycle = 0
                
                print(f"\n{'='*80}")
                print(f"üîÑ CICLO #{cycle_count} | ‚è∞ {datetime.now().strftime('%H:%M:%S')} | üìä Tempo: {elapsed_time/60:.1f}min")
                print(f"{'='*80}")
                
                # Teste de conectividade
                try:
                    test_price = self.data_manager.get_current_price('BTC/USDT')
                    if test_price > 0:
                        print(f"üü¢ Conex√£o API OK | BTC: ${test_price:,.0f}")
                    else:
                        print("üî¥ Problema na conex√£o API")
                except Exception as e:
                    print(f"üî¥ Erro de conectividade: {e}")
                
                print(f"\nüìà Verificando sinais em {len(self.symbols)} ativos:")
                print("-" * 80)
                
                for i, symbol in enumerate(self.symbols, 1):
                    total_checks += 1
                    try:
                        print(f"[{i}/{len(self.symbols)}] ", end='')
                        # Verificar sinais e executar trades se necess√°rio
                        if self.check_signals_and_trade(symbol):
                            trades_this_cycle += 1
                            
                    except Exception as e:
                        print(f"‚ùå Erro processando {symbol}: {e}")
                    
                    # Mini pausa entre verifica√ß√µes para n√£o sobrecarregar API
                    time.sleep(1)
                
                # Status do ciclo
                cycle_duration = time.time() - cycle_start
                roi = ((self.backtest_engine.capital - self.backtest_engine.initial_capital) / self.backtest_engine.initial_capital) * 100
                total_trades = len(self.backtest_engine.trades)
                
                print("-" * 80)
                print(f"üìä RESUMO DO CICLO #{cycle_count}:")
                print(f"   üí∞ Capital: ${self.backtest_engine.capital:.2f}")
                print(f"   üìà ROI: {roi:.2f}%")
                print(f"   üî¢ Total de trades: {total_trades}")
                print(f"   üÜï Novos trades neste ciclo: {trades_this_cycle}")
                print(f"   ‚è±Ô∏è Dura√ß√£o do ciclo: {cycle_duration:.1f}s")
                print(f"   üîç Total de verifica√ß√µes: {total_checks}")
                
                if trades_this_cycle > 0:
                    print(f"   üéØ {trades_this_cycle} NOVOS TRADES EXECUTADOS!")
                
                # Tempo restante
                remaining_time = max_duration - elapsed_time
                print(f"   ‚è∞ Tempo restante da execu√ß√£o: {remaining_time/60:.1f} min")
                
                # Aguardar com heartbeat
                sleep_time = min(120, remaining_time - 10)  # Deixar 10s de margem
                if sleep_time > 0:
                    print(f"\n‚è≥ Aguardando {sleep_time/60:.1f} min at√© pr√≥ximo ciclo...")
                    
                    # Heartbeat durante a espera
                    heartbeat_interval = 30  # Heartbeat a cada 30 segundos
                    elapsed_sleep = 0
                    
                    while elapsed_sleep < sleep_time:
                        actual_sleep = min(heartbeat_interval, sleep_time - elapsed_sleep)
                        time.sleep(actual_sleep)
                        elapsed_sleep += actual_sleep
                        
                        if elapsed_sleep < sleep_time:
                            remaining_wait = sleep_time - elapsed_sleep
                            print(f"üíì VIVO | {datetime.now().strftime('%H:%M:%S')} | Restam {remaining_wait/60:.1f} min para pr√≥ximo ciclo")
                
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è Monitoramento interrompido pelo usu√°rio ap√≥s {cycle_count} ciclos")
        
        print(f"\n{'='*80}")
        print(f"üìä EXECU√á√ÉO FINALIZADA")
        print(f"   üîÑ Ciclos executados: {cycle_count}")
        print(f"   ‚è±Ô∏è Dura√ß√£o total: {elapsed_time/60:.1f} minutos")
        print(f"   üîç Total de verifica√ß√µes: {total_checks}")
        print(f"={'='*80}")
        self.print_results()

def main():
    """Fun√ß√£o principal"""
    live_trading = int(os.getenv('LIVE_TRADING', '0')) == 1
    
    print("üöÄ TradingFuturo100 - Sistema com configura√ß√µes Hyperliquid")
    print("="*60)
    
    if live_trading:
        print("‚ö†Ô∏è ATEN√á√ÉO: LIVE_TRADING=1 detectado")
        print("üî¥ Executando MONITORAMENTO CONT√çNUO (com candle aberto)")
    else:
        print("üìä LIVE_TRADING=0 - Executando BACKTEST hist√≥rico")
    
    # Inicializar sistema
    system = TradingFuturo100(live_trading=False)  # Sempre em modo simula√ß√£o
    
    if live_trading:
        system.run_live_monitoring()
    else:
        system.run_backtest()

if __name__ == "__main__":
    main()
