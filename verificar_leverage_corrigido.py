#!/usr/bin/env python3
"""
VERIFICA√á√ÉO FINAL DE LEVERAGE - TRADING.PY
Confirma que TODAS as configura√ß√µes est√£o em 3x e USD_PER_TRADE est√° adequado
"""

import re
import os

def verificar_trading_py():
    print("üîç VERIFICA√á√ÉO COMPLETA DE LEVERAGE NO TRADING.PY")
    print("=" * 60)
    
    with open("/Users/joaoreis/Documents/GitHub/Cripto/trading.py", "r") as f:
        content = f.read()
    
    print("\nüìä CONFIGURA√á√ïES PRINCIPAIS:")
    
    # 1. Verificar GradientConfig LEVERAGE
    gradient_match = re.search(r'LEVERAGE:\s*int\s*=\s*(\d+)', content)
    if gradient_match:
        leverage_val = int(gradient_match.group(1))
        status = "‚úÖ" if leverage_val == 3 else "‚ùå"
        print(f"{status} GradientConfig.LEVERAGE = {leverage_val}x")
    
    # 2. Verificar environment leverage padr√£o
    env_match = re.search(r'os\.getenv\("LEVERAGE",\s*"(\d+)"\)', content)
    if env_match:
        env_leverage = int(env_match.group(1))
        status = "‚úÖ" if env_leverage == 3 else "‚ùå"
        print(f"{status} Environment LEVERAGE padr√£o = {env_leverage}x")
    
    # 3. Verificar USD_PER_TRADE padr√£o
    usd_match = re.search(r'usd_to_spend:\s*float\s*=\s*(\d+)', content)
    if usd_match:
        usd_val = int(usd_match.group(1))
        status = "‚úÖ" if usd_val == 4 else "‚ùå"
        print(f"{status} USD_PER_TRADE padr√£o = ${usd_val}")
    
    print("\nüéØ ASSET SETUPS:")
    
    # 4. Verificar todos os AssetSetups
    asset_pattern = r'AssetSetup\("([^"]+)",\s*"[^"]+",\s*"[^"]+",\s*(\d+),'
    assets = re.findall(asset_pattern, content)
    
    problemas = []
    for asset_name, leverage in assets:
        leverage_int = int(leverage)
        status = "‚úÖ" if leverage_int == 3 else "‚ùå"
        print(f"{status} {asset_name}: {leverage_int}x")
        if leverage_int != 3:
            problemas.append(f"{asset_name}: {leverage_int}x")
    
    # 5. Verificar se cfg.LEVERAGE = asset.leverage foi removido
    print("\nüõ†Ô∏è  VERIFICA√á√ïES CR√çTICAS:")
    
    # Verificar se existe fora de coment√°rios
    linhas_problematicas = []
    for num_linha, linha in enumerate(content.split('\n'), 1):
        if "cfg.LEVERAGE = asset.leverage" in linha and not linha.strip().startswith("#"):
            linhas_problematicas.append(f"Linha {num_linha}: {linha.strip()}")
    
    if linhas_problematicas:
        print("‚ùå CR√çTICO: cfg.LEVERAGE = asset.leverage ainda existe!")
        for linha in linhas_problematicas:
            print(f"   {linha}")
        problemas.append("cfg.LEVERAGE = asset.leverage n√£o removido")
    else:
        print("‚úÖ cfg.LEVERAGE = asset.leverage removido corretamente")
    
    # 6. Calcular valor final com leverage
    final_amount = 4 * 3  # USD_PER_TRADE * LEVERAGE
    print(f"\nüí∞ C√ÅLCULO FINAL:")
    print(f"‚úÖ $4 USD √ó 3x leverage = ${final_amount} (acima do m√≠nimo)")
    
    print(f"\nüìã RESUMO:")
    if not problemas:
        print("üéâ PERFEITO! Todas as configura√ß√µes est√£o corretas:")
        print("   ‚Ä¢ Leverage: 3x em TODOS os assets")
        print("   ‚Ä¢ USD padr√£o: $4 (suficiente para m√≠nimo)")
        print("   ‚Ä¢ Valor final: $12 por trade")
        print("   ‚Ä¢ cfg.LEVERAGE = asset.leverage removido")
        return True
    else:
        print("‚ùå PROBLEMAS ENCONTRADOS:")
        for problema in problemas:
            print(f"   ‚Ä¢ {problema}")
        return False

if __name__ == "__main__":
    sucesso = verificar_trading_py()
    
    if sucesso:
        print("\nüöÄ SISTEMA PRONTO PARA DEPLOY!")
        print("Environment no Render deve ter:")
        print("USD_PER_TRADE=4")
        print("LEVERAGE=3")
    else:
        print("\n‚ö†Ô∏è  CORRE√á√ïES NECESS√ÅRIAS ANTES DO DEPLOY!")
