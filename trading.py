#!/usr/bin/env python3

"""
Sistema de Trading Simplificado - Apenas SimpleRatioStrategy
Removidas todas as funcionalidades desnecess√°rias: learner, fast, safat, etc.
"""

import os
import sys
import time
import sqlite3
import hashlib
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, List, Tuple
from dataclasses import dataclass

# ===== CONFIGURA√á√ÉO DE TIMEZONE =====
UTC = timezone.utc

# ===== IMPORTS ESSENCIAIS =====
import ccxt
import requests

# ===== LOGGING GLOBAL =====
# Configura√ß√£o global de log file
_LOG_FILE = None

def setup_log_file():
    """Configura arquivo de log baseado na data/hora atual"""
    global _LOG_FILE
    if _LOG_FILE is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        _LOG_FILE = f"trading_session_{timestamp}.log"
        print(f"üìù Log ser√° salvo em: {_LOG_FILE}")

def _log_global(channel: str, message: str, level: str = "INFO"):
    """Sistema de log global com grava√ß√£o em arquivo"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_line = f"[{timestamp}] [{level}] [{channel}] {message}"
    
    # Print no terminal
    print(log_line, flush=True)
    
    # Salvar em arquivo se configurado
    if _LOG_FILE:
        try:
            with open(_LOG_FILE, 'a', encoding='utf-8') as f:
                f.write(log_line + '\n')
                f.flush()
        except Exception as e:
            print(f"[ERROR] Erro salvando log: {e}")

# ===== NOTIFICA√á√ïES DISCORD =====
class DiscordNotifier:
    """Sistema simplificado de notifica√ß√µes Discord"""
    
    def __init__(self):
        self.webhook_url = os.getenv("DISCORD_WEBHOOK_URL", "")
        self.enabled = bool(self.webhook_url)
        self.last_notification_time = 0
        self.cooldown_seconds = 30  # Cooldown entre notifica√ß√µes
    
    def send_notification(self, title: str, message: str, color: int = 0x00ff00):
        """Envia notifica√ß√£o para Discord"""
        if not self.enabled:
            return False
        
        # Rate limiting
        current_time = time.time()
        if current_time - self.last_notification_time < self.cooldown_seconds:
            return False
        
        try:
            embed = {
                "title": title,
                "description": message,
                "color": color,
                "timestamp": datetime.now().isoformat(),
                "footer": {
                    "text": "SimpleRatio Trading Bot"
                }
            }
            
            payload = {
                "embeds": [embed]
            }
            
            response = requests.post(self.webhook_url, json=payload, timeout=10)
            
            if response.status_code == 204:
                self.last_notification_time = current_time
                _log_global("DISCORD", f"Notifica√ß√£o enviada: {title}", "INFO")
                return True
            else:
                _log_global("DISCORD", f"Erro enviando notifica√ß√£o: {response.status_code}", "WARN")
                return False
                
        except Exception as e:
            _log_global("DISCORD", f"Erro no Discord: {e}", "ERROR")
            return False
    
    def notify_trade_open(self, symbol: str, side: str, price: float, amount: float, reason: str = ""):
        """Notifica abertura de trade"""
        side_emoji = "üü¢" if side.lower() == "buy" else "üî¥"
        title = f"{side_emoji} POSI√á√ÉO ABERTA"
        
        message = f"""
**S√≠mbolo:** {symbol}
**Dire√ß√£o:** {side.upper()}
**Pre√ßo:** ${price:.6f}
**Quantidade:** {amount:.2f}
**Motivo:** {reason}
        """.strip()
        
        color = 0x00ff00 if side.lower() == "buy" else 0xff0000
        return self.send_notification(title, message, color)
    
    def notify_trade_close(self, symbol: str, side: str, price: float, amount: float, pnl_pct: float = None, reason: str = ""):
        """Notifica fechamento de trade"""
        if pnl_pct is not None:
            if pnl_pct > 0:
                title = "üí∞ POSI√á√ÉO FECHADA - LUCRO"
                color = 0x00ff00
                pnl_text = f"+{pnl_pct:.2f}%"
            else:
                title = "üìâ POSI√á√ÉO FECHADA - PREJU√çZO"
                color = 0xff0000
                pnl_text = f"{pnl_pct:.2f}%"
        else:
            title = "üö™ POSI√á√ÉO FECHADA"
            color = 0xffff00
            pnl_text = "N/A"
        
        message = f"""
**S√≠mbolo:** {symbol}
**Dire√ß√£o:** {side.upper()}
**Pre√ßo:** ${price:.6f}
**Quantidade:** {amount:.2f}
**P&L:** {pnl_text}
**Motivo:** {reason}
        """.strip()
        
        return self.send_notification(title, message, color)
    
    def notify_error(self, error_msg: str, symbol: str = ""):
        """Notifica erro cr√≠tico"""
        title = "‚ö†Ô∏è ERRO NO SISTEMA"
        
        message = f"""
**S√≠mbolo:** {symbol if symbol else "Sistema"}
**Erro:** {error_msg}
**Timestamp:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        return self.send_notification(title, message, 0xff0000)

# Inst√¢ncia global do notificador
discord_notifier = DiscordNotifier()

# ===== CALCULADORA DE INDICADORES T√âCNICOS =====
class TechnicalIndicators:
    """Calcula indicadores t√©cnicos para monitoramento"""
    
    @staticmethod
    def ema(data: pd.Series, period: int) -> pd.Series:
        """Calcula EMA (Exponential Moving Average)"""
        return data.ewm(span=period, adjust=False).mean()
    
    @staticmethod
    def atr(high: pd.Series, low: pd.Series, close: pd.Series, period: int = 14) -> pd.Series:
        """Calcula ATR (Average True Range)"""
        high_low = high - low
        high_close = np.abs(high - close.shift())
        low_close = np.abs(low - close.shift())
        ranges = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
        return ranges.rolling(window=period).mean()
    
    @staticmethod
    def volume_ma(volume: pd.Series, period: int = 30) -> pd.Series:
        """Calcula m√©dia m√≥vel do volume"""
        return volume.rolling(window=period).mean()
    
    @staticmethod
    def gradient_percentage(data: pd.Series, periods: int = 1) -> float:
        """Calcula gradiente percentual"""
        if len(data) < periods + 1:
            return 0.0
        current = data.iloc[-1]
        past = data.iloc[-(periods + 1)]
        if past == 0:
            return 0.0
        return ((current - past) / past) * 100
    
    @staticmethod
    def k_atr_ratio(close_price: float, atr_value: float) -> float:
        """Calcula ratio K-ATR"""
        if atr_value == 0:
            return 0.0
        return close_price / atr_value
    
    @staticmethod
    def estimate_buy_sell_volumes(df: pd.DataFrame) -> Dict[str, float]:
        """Estima volumes de compra e venda baseado no movimento de pre√ßos"""
        if len(df) < 2:
            return {"buy_vol": 0, "sell_vol": 0, "total_vol": 0}
        
        current_row = df.iloc[-1]
        prev_row = df.iloc[-2]
        
        current_close = float(current_row.get('valor_fechamento', 0))
        prev_close = float(prev_row.get('valor_fechamento', current_close))
        current_volume = float(current_row.get('volume', 0))
        
        # Estimar propor√ß√£o de compra/venda baseado no movimento de pre√ßo
        price_change = current_close - prev_close
        
        if price_change > 0:
            # Pre√ßo subiu - mais volume de compra
            buy_ratio = min(0.8, 0.5 + abs(price_change) / current_close * 20)
        elif price_change < 0:
            # Pre√ßo caiu - mais volume de venda
            buy_ratio = max(0.2, 0.5 - abs(price_change) / current_close * 20)
        else:
            # Sem mudan√ßa de pre√ßo
            buy_ratio = 0.5
        
        buy_vol = current_volume * buy_ratio
        sell_vol = current_volume * (1 - buy_ratio)
        
        return {
            "buy_vol": buy_vol,
            "sell_vol": sell_vol,
            "total_vol": current_volume,
            "buy_ratio": buy_ratio
        }

# ===== MONITOR DE INDICADORES =====
class TradingMonitor:
    """Sistema de monitoramento de indicadores t√©cnicos"""
    
    def __init__(self):
        self.indicators = TechnicalIndicators()
        self.last_snapshot_time = 0
        self.snapshot_interval = 30  # Snapshot a cada 30 segundos
    
    def should_take_snapshot(self) -> bool:
        """Verifica se deve tirar um snapshot dos indicadores"""
        current_time = time.time()
        if current_time - self.last_snapshot_time >= self.snapshot_interval:
            self.last_snapshot_time = current_time
            return True
        return False
    
    def calculate_indicators(self, df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
        """Calcula todos os indicadores t√©cnicos"""
        if len(df) < 30:
            return {}
        
        try:
            # Preparar dados
            close = df['valor_fechamento'].astype(float)
            volume = df['volume'].astype(float)
            
            # Verificar se temos colunas de high/low
            if 'valor_alta' in df.columns and 'valor_baixa' in df.columns:
                high = df['valor_alta'].astype(float)
                low = df['valor_baixa'].astype(float)
            else:
                # Usar close como approxima√ß√£o
                high = close
                low = close
            
            current_close = close.iloc[-1]
            current_volume = volume.iloc[-1]
            
            # Calcular EMAs
            ema7 = self.indicators.ema(close, 7)
            ema21 = self.indicators.ema(close, 21)
            
            # Calcular ATR
            atr = self.indicators.atr(high, low, close, 14)
            current_atr = atr.iloc[-1] if len(atr) > 0 else 0
            atr_pct = (current_atr / current_close * 100) if current_close > 0 else 0
            
            # Calcular Volume MA
            vol_ma = self.indicators.volume_ma(volume, 30)
            current_vol_ma = vol_ma.iloc[-1] if len(vol_ma) > 0 else 0
            
            # Calcular gradiente EMA7
            grad_ema7 = self.indicators.gradient_percentage(ema7, 1)
            
            # Calcular K-ATR
            k_atr = self.indicators.k_atr_ratio(current_close, current_atr)
            
            # Calcular m√©dias de volume (30 candles)
            avg_30c = vol_ma.iloc[-1] if len(vol_ma) > 0 else current_volume
            vol_ratio = current_volume / avg_30c if avg_30c > 0 else 0
            
            # Estimar volumes de compra/venda
            buysell_data = self.indicators.estimate_buy_sell_volumes(df)
            
            # Calcular m√©dias hist√≥ricas de compra/venda (√∫ltimos 30 per√≠odos)
            if len(df) >= 30:
                buy_volumes = []
                sell_volumes = []
                
                for i in range(-30, 0):
                    if abs(i) <= len(df):
                        temp_df = df.iloc[max(0, len(df) + i - 1):len(df) + i + 1]
                        if len(temp_df) >= 2:
                            temp_buysell = self.indicators.estimate_buy_sell_volumes(temp_df)
                            buy_volumes.append(temp_buysell["buy_vol"])
                            sell_volumes.append(temp_buysell["sell_vol"])
                
                buy_avg30 = np.mean(buy_volumes) if buy_volumes else buysell_data["buy_vol"]
                sell_avg30 = np.mean(sell_volumes) if sell_volumes else buysell_data["sell_vol"]
            else:
                buy_avg30 = buysell_data["buy_vol"]
                sell_avg30 = buysell_data["sell_vol"]
            
            # Calcular ratios
            buy_ratio = buysell_data["buy_vol"] / buy_avg30 if buy_avg30 > 0 else 0
            sell_ratio = buysell_data["sell_vol"] / sell_avg30 if sell_avg30 > 0 else 0
            buy_sell_ratio = buysell_data["buy_vol"] / buysell_data["sell_vol"] if buysell_data["sell_vol"] > 0 else 0
            avg_buy_sell_ratio = buy_avg30 / sell_avg30 if sell_avg30 > 0 else 0
            
            return {
                "symbol": symbol,
                "close": current_close,
                "ema7": ema7.iloc[-1],
                "ema21": ema21.iloc[-1],
                "atr": current_atr,
                "atr_pct": atr_pct,
                "volume": current_volume,
                "vol_ma": current_vol_ma,
                "grad_ema7": grad_ema7,
                "k_atr": k_atr,
                "trades_now": current_volume,
                "avg_30c": avg_30c,
                "vol_ratio": vol_ratio,
                "buy_vol": buysell_data["buy_vol"],
                "buy_avg30": buy_avg30,
                "buy_ratio": buy_ratio,
                "sell_vol": buysell_data["sell_vol"],
                "sell_avg30": sell_avg30,
                "sell_ratio": sell_ratio,
                "buy_sell_ratio": buy_sell_ratio,
                "avg_buy_sell_ratio": avg_buy_sell_ratio
            }
            
        except Exception as e:
            _log_global("MONITOR", f"Erro calculando indicadores: {e}", "ERROR")
            return {}
    
    def print_snapshot(self, indicators: Dict[str, Any]):
        """Imprime snapshot dos indicadores no formato solicitado"""
        if not indicators:
            return
        
        snapshot = (
            f"[DEBUG] [{indicators['symbol']}] Trigger snapshot | "
            f"close={indicators['close']:.6f} "
            f"ema7={indicators['ema7']:.6f} "
            f"ema21={indicators['ema21']:.6f} "
            f"atr={indicators['atr']:.6f} "
            f"atr%={indicators['atr_pct']:.3f} "
            f"vol={indicators['volume']:.2f} "
            f"vol_ma={indicators['vol_ma']:.2f} "
            f"grad%_ema7={indicators['grad_ema7']:.4f} | "
            f"current_k_atr={indicators['k_atr']:.3f} | "
            f"trades_now={indicators['trades_now']:.0f} "
            f"avg_30c={indicators['avg_30c']:.0f} "
            f"ratio={indicators['vol_ratio']:.2f}x | "
            f"buy_vol={indicators['buy_vol']:.0f} "
            f"buy_avg30={indicators['buy_avg30']:.0f} "
            f"buy_ratio={indicators['buy_ratio']:.2f}x | "
            f"sell_vol={indicators['sell_vol']:.0f} "
            f"sell_avg30={indicators['sell_avg30']:.0f} "
            f"sell_ratio={indicators['sell_ratio']:.2f}x | "
            f"buy/sell={indicators['buy_sell_ratio']:.2f} "
            f"avg_buy/sell={indicators['avg_buy_sell_ratio']:.2f}"
        )
        
        print(snapshot, flush=True)

# Inst√¢ncia global do monitor
trading_monitor = TradingMonitor()

# ===== CACHE DE DADOS =====
class DataCache:
    def __init__(self, ttl_seconds: int = 30):
        self.cache = {}
        self.ttl = ttl_seconds
    
    def get(self, key: str):
        if key in self.cache:
            timestamp, data = self.cache[key]
            if time.time() - timestamp < self.ttl:
                return data
        return None
    
    def set(self, key: str, data):
        self.cache[key] = (time.time(), data)
    
    def clear(self):
        self.cache.clear()

# Cache global
_data_cache = DataCache(ttl_seconds=30)

def _get_cached_api_call(cache_key: str, func, *args, **kwargs):
    """Wrapper para chamadas de API com cache"""
    cached = _data_cache.get(cache_key)
    if cached is not None:
        return cached
    
    result = func(*args, **kwargs)
    _data_cache.set(cache_key, result)
    return result

# ===== EXCE√á√ÉO PERSONALIZADA =====
class MarketDataUnavailable(Exception):
    """Sinaliza indisponibilidade tempor√°ria de candles para um ativo/timeframe."""
    pass

# ===== CONFIGURA√á√ÉO DE CARTEIRAS =====
@dataclass
class WalletConfig:
    name: str
    is_subconta: bool = False
    vault_address: Optional[str] = None
    
    def get_dex_instance(self):
        """Retorna inst√¢ncia do DEX para esta carteira"""
        if self.is_subconta and self.vault_address:
            return RealDataDex(vault_address=self.vault_address)
        else:
            return RealDataDex()

# Configura√ß√µes de carteiras usando vari√°veis de ambiente
def get_wallet_config():
    """Obt√©m configura√ß√£o da carteira a partir das vari√°veis de ambiente"""
    wallet_address = os.getenv("WALLET_ADDRESS")
    private_key = os.getenv("HYPERLIQUID_PRIVATE_KEY") 
    subaccount = os.getenv("HYPERLIQUID_SUBACCOUNT")
    
    # Se h√° subaccount especificada, usar como subconta
    if subaccount:
        return WalletConfig(
            name="Subconta Trading (ENV)",
            is_subconta=True,
            vault_address=wallet_address  # Vault sempre igual ao WALLET_ADDRESS
        )
    else:
        # Usar carteira principal
        return WalletConfig(
            name="Carteira Principal (ENV)",
            is_subconta=False,
            vault_address=wallet_address  # Vault sempre igual ao WALLET_ADDRESS
        )

# Configura√ß√µes de carteiras dispon√≠veis (fallback)
WALLET_CONFIGS = [
    WalletConfig(
        name="Carteira Principal",
        is_subconta=False,
        vault_address=None
    ),
    WalletConfig(
        name="Subconta Trading",
        is_subconta=True,
        vault_address="0x5ff0f14d577166f9ede3d9568a423166be61ea9d"
    )
]

# ===== DEX REAL =====
class RealDataDex:
    """Interface simplificada para Hyperliquid"""
    
    def __init__(self, vault_address: Optional[str] = None):
        # Configura√ß√£o b√°sica para Hyperliquid
        self.vault_address = vault_address
        self._setup_hyperliquid()
    
    def _setup_hyperliquid(self):
        """Configura conex√£o com Hyperliquid usando vari√°veis de ambiente"""
        try:
            # Obter vari√°veis de ambiente
            wallet_address = os.getenv("WALLET_ADDRESS")
            private_key = os.getenv("HYPERLIQUID_PRIVATE_KEY")
            subaccount = os.getenv("HYPERLIQUID_SUBACCOUNT")

            # Configura√ß√£o b√°sica do ccxt para Hyperliquid
            config = {
                'sandbox': False,
                'options': {
                    'defaultType': 'swap',
                }
            }

            # Adicionar credenciais se dispon√≠veis
            if wallet_address and private_key:
                config['apiKey'] = wallet_address
                config['secret'] = private_key
                _log_global("DEX", f"üîê Credenciais configuradas: {wallet_address[:10]}...", "INFO")

            self.exchange = ccxt.hyperliquid(config)

            # Vault sempre igual ao WALLET_ADDRESS
            if wallet_address:
                self.exchange.options['vault'] = wallet_address
                _log_global("DEX", f"üè¶ Vault configurado: {wallet_address}", "INFO")

            # Configurar subaccount se especificada
            if subaccount:
                self.exchange.options['subAccount'] = subaccount
                _log_global("DEX", f"üìã Subaccount configurado: {subaccount}", "INFO")

        except Exception as e:
            _log_global("DEX", f"Erro configurando Hyperliquid: {e}", "ERROR")
            # Fallback para modo demo sem exchange real
            self.exchange = None
    
    def fetch_ticker(self, symbol: str):
        """Busca ticker do s√≠mbolo"""
        if not self.exchange:
            # Retorna ticker fict√≠cio para modo demo
            return {'symbol': symbol, 'last': 0.004500}
        return self.exchange.fetch_ticker(symbol)
    
    def fetch_positions(self, symbols: List[str] = None):
        """Busca posi√ß√µes abertas"""
        if not self.exchange:
            # Retorna lista vazia para modo demo
            return []
        # Para Hyperliquid, usar par√¢metros espec√≠ficos se dispon√≠vel
        wallet_address = os.getenv("WALLET_ADDRESS")
        if wallet_address:
            params = {'user': wallet_address}
            return self.exchange.fetch_positions(symbols, params)
        else:
            return self.exchange.fetch_positions(symbols)
    
    def fetch_open_orders(self, symbol: str):
        """Busca ordens abertas"""
        if not self.exchange:
            return []
        return self.exchange.fetch_open_orders(symbol)
    
    def create_order(self, symbol: str, type_: str, side: str, amount: float, price: float, params: dict = None):
        """Cria ordem"""
        if not self.exchange:
            # Modo demo: log da ordem mas n√£o executa
            _log_global("DEX", f"üí§ DEMO: {side.upper()} {amount:.2f} {symbol} @ {price:.6f}", "INFO")
            return {'id': 'demo_order_12345', 'symbol': symbol, 'side': side, 'amount': amount}
        return self.exchange.create_order(symbol, type_, side, amount, price, params or {})
    
    def cancel_order(self, order_id: str, symbol: str):
        """Cancela ordem"""
        if not self.exchange:
            return {'id': order_id, 'status': 'canceled'}
        return self.exchange.cancel_order(order_id, symbol)
    
    def set_leverage(self, leverage: int, symbol: str, params: dict = None):
        """Define leverage"""
        if not self.exchange:
            _log_global("DEX", f"üí§ DEMO: Set leverage {leverage}x for {symbol}", "DEBUG")
            return
        return self.exchange.set_leverage(leverage, symbol, params or {})
        return self.exchange.set_leverage(leverage, symbol, params or {})

# ===== LOGGER DE TRADES =====
class TradeLogger:
    def __init__(self, df_columns: pd.Index, 
                 use_local_csv: bool = True, 
                 use_sqlite_db: bool = False,
                 csv_path: str = None,
                 db_path: str = None):
        self.df_columns = df_columns
        self.use_local_csv = use_local_csv
        self.use_sqlite_db = use_sqlite_db
        self.csv_path = csv_path or "trading_log.csv"
        self.db_path = db_path or "trading.db"
    
    def log_trade(self, event_type: str, details: Dict[str, Any]):
        """Log de trade simplificado"""
        timestamp = datetime.now().isoformat()
        log_entry = {
            'timestamp': timestamp,
            'event_type': event_type,
            **details
        }
        
        # Log apenas no console por simplicidade
        _log_global("TRADE", f"{event_type}: {details}", "INFO")

# ===== CONFIGURA√á√ÉO SIMPLIFICADA =====
class SimpleRatioConfig:
    """Configura√ß√£o simples para estrat√©gia baseada em avg_buy/sell ratio"""
    
    # Assets permitidos (s√≠mbolos corretos da Binance para dados hist√≥ricos)
    ASSETS: List[str] = ["PUMPUSDT", "AVNTUSDT"]
    
    # Mapeamento de s√≠mbolos: Binance (dados) -> Hyperliquid (trading)
    SYMBOL_MAPPING = {
        "PUMPUSDT": "PUMP/USDC:USDC",  # Binance -> Hyperliquid
        "AVNTUSDT": "AVNT/USDC:USDC"   # Binance -> Hyperliquid
    }
    
    @classmethod
    def get_trading_symbol(cls, data_symbol: str) -> str:
        """Converte s√≠mbolo de dados para s√≠mbolo de trading"""
        return cls.SYMBOL_MAPPING.get(data_symbol, data_symbol)
    
    # Execu√ß√£o
    LEVERAGE: int           = 10          # Leverage moderado
    STOP_LOSS_PCT: float    = 0.20        # Stop loss fixo 20%
    TRADE_SIZE_USD: float   = 3.0         # Valor fixo por trade
    
    # Ratio tracking (para detectar invers√µes)
    RATIO_HISTORY_SIZE: int = 5           # √öltimos N ratios para detectar invers√£o
    
    # Valida√ß√£o (mantemos alguns filtros b√°sicos de seguran√ßa)
    USD_PER_TRADE: float    = 3.0         # Valor fixo por trade
    MIN_ORDER_USD: float    = 10.0
    STOP_LOSS_CAPITAL_PCT: float = 0.20  # 20% da margem como stop inicial (reduzido de 30% para 20%)
    TAKE_PROFIT_CAPITAL_PCT: float = 0.50   # take profit em 50% da margem (aumentado de 30% para 50%)
    MAX_LOSS_ABS_USD: float    = 50.00     # hard stop emergencial - limite absoluto de perda por posi√ß√£o (DESABILITADO TEMP)

    # down & anti-flip-flop
    COOLDOWN_BARS: int      = 0           # cooldown por velas desativado (usar tempo)
    POST_COOLDOWN_CONFIRM: int = 0        # confirma√ß√µes p√≥s-cooldown desativadas
    COOLDOWN_MINUTOS: int   = 120          # tempo m√≠nimo entre entradas ap√≥s sa√≠da

# ===== ASSET SETUP =====
class AssetSetup:
    def __init__(self):
        pass

# ===== ESTRAT√âGIA PRINCIPAL =====
class SimpleRatioStrategy:
    """Estrat√©gia simplificada baseada apenas em avg_buy/sell ratio"""
    
    def __init__(self, dex, symbol: str, cfg: SimpleRatioConfig = SimpleRatioConfig(), logger: "TradeLogger" = None, debug: bool = True, wallet_config: WalletConfig = None):
        self.dex = dex
        self.symbol = symbol  # S√≠mbolo para dados (Binance)
        self.trading_symbol = cfg.get_trading_symbol(symbol)  # S√≠mbolo para trading (Hyperliquid)
        self.cfg = cfg
        self.logger = logger
        self.debug = debug
        self.wallet_config = wallet_config or WALLET_CONFIGS[0]  # Default para carteira principal

        # Estado simples para nova estrat√©gia de ratio
        self._last_pos_side: Optional[str] = None
        self._position_entry_time: Optional[float] = None
        self._entry_price: Optional[float] = None       # Pre√ßo de entrada para c√°lculo de P&L
        self._last_ratio_value: Optional[float] = None  # √öltimo valor do ratio avg_buy/sell
        self._ratio_history: List[float] = []           # Hist√≥rico de ratios para detectar invers√µes
        
        # Debug
        self.debug_force_ratio: Optional[float] = None  # Para testes: for√ßa um ratio espec√≠fico
        
        # Manter algumas vari√°veis essenciais para compatibilidade
        self._first_step_done: bool = False

        base = symbol.split("/")[0]
        self._df_symbol_hint = f"{base}USDT"

        # Buffer local (redund√¢ncia) e flags
        self._local_events = []              # lista de eventos (fallback/espelho)
        self._local_events_count = 0         # contador de eventos locais
        self.force_local_log = False         # True => ignora logger externo
        self.duplicate_local_always = True   # True => sempre duplica no local

        # Estado para cooldown por barras e inten√ß√£o p√≥s-cooldown
        self._bars_since_last_close = 0     # contador de barras desde √∫ltimo fechamento
        self._pending_intent_after_cd = None # inten√ß√£o pendente p√≥s-cooldown

    @property
    def _subconta_dex(self):
        """Retorna a inst√¢ncia do DEX configurada para subconta"""
        return self.wallet_config.get_dex_instance()

    def _log(self, message: str, level: str = "INFO"):
        """Log interno da estrat√©gia"""
        prefix = f"[{self.symbol}]"
        _log_global("STRATEGY", f"{prefix} {message}", level)

    def step(self, df: pd.DataFrame):
        """Fun√ß√£o principal da estrat√©gia simplificada"""
        try:
            if len(df) < 30:  # Precisamos de dados suficientes
                return


            # 1. Calcular e mostrar snapshot de indicadores t√©cnicos para cada ativo
            indicators = trading_monitor.calculate_indicators(df, self.symbol)
            if indicators:
                trading_monitor.print_snapshot(indicators)


            # 2. Calcular m√©dias e somas de volumes de compra/venda para 30, 10, 5 e 3 candles
            def rolling_buy_sell_vol_sum(df, window):
                buy_vols = []
                sell_vols = []
                for i in range(-window, 0):
                    if abs(i) <= len(df):
                        temp_df = df.iloc[max(0, len(df) + i - 1):len(df) + i + 1]
                        if len(temp_df) >= 2:
                            temp_buysell = TechnicalIndicators.estimate_buy_sell_volumes(temp_df)
                            buy_vols.append(temp_buysell["buy_vol"])
                            sell_vols.append(temp_buysell["sell_vol"])
                return sum(buy_vols), sum(sell_vols)

            def rolling_avg_buy_sell_ratio(df, window):
                ratios = []
                for i in range(-window, 0):
                    if abs(i) <= len(df):
                        temp_df = df.iloc[max(0, len(df) + i - 1):len(df) + i + 1]
                        if len(temp_df) >= 2:
                            temp_buysell = TechnicalIndicators.estimate_buy_sell_volumes(temp_df)
                            buy = temp_buysell["buy_vol"]
                            sell = temp_buysell["sell_vol"]
                            if sell > 0:
                                ratios.append(buy / sell)
                return np.mean(ratios) if ratios else 0

            # Ratio avg_buy/sell (m√©dia dos ratios)
            # 1. Calcular e mostrar snapshot de indicadores t√©cnicos para cada ativo
            indicators = trading_monitor.calculate_indicators(df, self.symbol)
            if indicators:
                trading_monitor.print_snapshot(indicators)

            ratio_3 = rolling_avg_buy_sell_ratio(df, 3) if len(df) >= 3 else 0

            # Atualizar hist√≥rico do ratio_3
            if not hasattr(self, '_ratio_3_history'):
                self._ratio_3_history = []
            self._ratio_3_history.append(ratio_3)
            if len(self._ratio_3_history) > 2:
                self._ratio_3_history = self._ratio_3_history[-2:]

            # Log do ratio_3
            self._log(f"üìä Ratio avg_buy/sell 3 candles: {ratio_3:.3f}", level="DEBUG")

            # Detectar cruzamento para entrada/sa√≠da
            pos = self._posicao_aberta()
            if len(self._ratio_3_history) < 2:
                return
            prev_ratio = self._ratio_3_history[-2]
            curr_ratio = self._ratio_3_history[-1]

            # LONG: entra quando cruza de <=0.99 para >=1.0, sai quando cruza de >=1.0 para <=0.99
            # SHORT: entra quando cruza de >=1.0 para <=0.99, sai quando cruza de <=0.99 para >=1.0
            if not pos:
                # Sem posi√ß√£o aberta
                if prev_ratio <= 0.99 and curr_ratio >= 1.0:
                    self._log(f"üöÄ ENTRADA LONG: ratio_3 cruzou de {prev_ratio:.3f} para {curr_ratio:.3f}", level="INFO")
                    self._enter_position("buy", self.cfg.TRADE_SIZE_USD, df)
                elif prev_ratio >= 1.0 and curr_ratio <= 0.99:
                    self._log(f"üöÄ ENTRADA SHORT: ratio_3 cruzou de {prev_ratio:.3f} para {curr_ratio:.3f}", level="INFO")
                    self._enter_position("sell", self.cfg.TRADE_SIZE_USD, df)
            else:
                # Com posi√ß√£o aberta
                side = self._norm_side(pos.get("side"))
                if side == "buy":
                    if prev_ratio >= 1.0 and curr_ratio <= 0.99:
                        self._log(f"üö™ SA√çDA LONG: ratio_3 cruzou de {prev_ratio:.3f} para {curr_ratio:.3f}", level="INFO")
                        self._close_position(df)
                elif side == "sell":
                    if prev_ratio <= 0.99 and curr_ratio >= 1.0:
                        self._log(f"üö™ SA√çDA SHORT: ratio_3 cruzou de {prev_ratio:.3f} para {curr_ratio:.3f}", level="INFO")
                        self._close_position(df)
            # Bloco removido: toda a l√≥gica de entrada/sa√≠da j√° est√° implementada acima usando apenas o ratio de 3 candles
            # Garantir que n√£o h√° uso de vari√°veis fora do escopo
                        
            # 3. Verificar fechamento por tempo (4 horas) - mantido do sistema anterior
            if self._position_entry_time is not None:
                import time as _time
                current_time = _time.time()
                time_in_position = current_time - self._position_entry_time
                time_limit_4h = 4 * 60 * 60  # 4 horas em segundos
                
                if time_in_position >= time_limit_4h:
                    self._log(f"‚è∞ SA√çDA POR TEMPO: {time_in_position/3600:.1f}h - fechando posi√ß√£o", level="WARN")
                    self._close_position(df)
                    return
                    
        except Exception as e:
            self._log(f"Erro verificando condi√ß√µes de sa√≠da: {e}", level="ERROR")
            
    def _update_ratio_history(self, current_ratio: float):
        """Atualiza hist√≥rico de ratios mantendo apenas os √∫ltimos N valores"""
        self._ratio_history.append(current_ratio)
        
        # Manter apenas os √∫ltimos valores conforme configura√ß√£o
        max_history = self.cfg.RATIO_HISTORY_SIZE
        if len(self._ratio_history) > max_history:
            self._ratio_history = self._ratio_history[-max_history:]
            
        self._last_ratio_value = current_ratio
        
    def _enter_position(self, side: str, usd_to_spend: float, df: pd.DataFrame):
        """Abre posi√ß√£o simples na subconta"""
        try:
            import time as _time
            self._log(f"[ENTRADA] Sinal detectado para {side.upper()} em {self.trading_symbol}", level="INFO")
            # Configurar leverage
            self._subconta_dex.set_leverage(self.cfg.LEVERAGE, self.symbol, {"marginMode": "isolated"})

            # Sempre buscar o pre√ßo atual da Hyperliquid
            current_price = self._preco_atual()
            self._log(f"[ENTRADA] Pre√ßo atual Hyperliquid: {current_price}", level="DEBUG")
            if not current_price or current_price <= 0:
                self._log(f"[ENTRADA] Pre√ßo inv√°lido para entrada: {current_price}", level="ERROR")
                return

            amount = usd_to_spend * self.cfg.LEVERAGE / current_price
            self._log(f"[ENTRADA] Quantidade calculada: {amount}", level="DEBUG")

            # Criar ordem market
            try:
                order = self._subconta_dex.create_order(self.trading_symbol, "market", side, amount, current_price)
                self._log(f"[ENTRADA] Ordem enviada para Hyperliquid: {order}", level="INFO")
            except Exception as e:
                self._log(f"[ENTRADA] Falha ao enviar ordem para Hyperliquid: {e}", level="ERROR")
                raise

            # Registrar tempo de entrada
            self._position_entry_time = _time.time()
            self._last_pos_side = self._norm_side(side)
            self._entry_price = current_price  # Rastrear pre√ßo de entrada para P&L

            # Criar stop loss simples
            sl_price = self._calculate_stop_price(current_price, side)
            if sl_price:
                sl_side = "sell" if side == "buy" else "buy"
                try:
                    sl_order = self._subconta_dex.create_order(self.trading_symbol, "stop_market", sl_side, amount, sl_price, {"reduceOnly": True})
                    self._log(f"üõ°Ô∏è Stop loss criado: {sl_side} @ {sl_price:.6f} | Ordem: {sl_order}", level="INFO")
                except Exception as e:
                    self._log(f"Erro criando stop loss: {e}", level="WARN")

            # Notificar
            self._notify_trade("open", side, current_price, amount, f"Entrada por ratio", include_hl=False)
            self._log(f"‚úÖ POSI√á√ÉO ABERTA: {side.upper()} {amount:.2f} @ {current_price:.6f}", level="INFO")

        except Exception as e:
            error_msg = str(e).lower()
            self._log(f"[ENTRADA] Erro ao tentar abrir posi√ß√£o: {e}", level="ERROR")
            # Log detalhado do motivo do fallback
            if not self._subconta_dex.exchange:
                self._log(f"[ENTRADA] Fallback para modo demo: Exchange n√£o inicializada.", level="WARN")
            elif any(x in error_msg for x in ['user parameter', 'wallet address', 'authentication', 'credential']):
                self._log(f"[ENTRADA] Fallback para modo demo: Credenciais ausentes ou inv√°lidas.", level="WARN")
            elif 'does not have market symbol' in error_msg or 'market' in error_msg:
                self._log(f"[ENTRADA] Fallback para modo demo: Mercado {self.trading_symbol} n√£o dispon√≠vel na Hyperliquid.", level="WARN")
            else:
                self._log(f"[ENTRADA] Fallback para modo demo: Erro inesperado: {e}", level="WARN")
            
    def _close_position(self, df: pd.DataFrame):
        """Fecha posi√ß√£o atual"""
        try:
            import time as _time
            
            pos = self._posicao_aberta()
            if not pos:
                return
                
            side = self._norm_side(pos.get("side"))
            amount = abs(float(pos.get("contracts", 0)))
            
            if amount <= 0:
                return
                
            # Determinar lado de fechamento
            close_side = "sell" if side == "buy" else "buy"
            current_price = self._preco_atual()
            
            # Fechar posi√ß√£o
            self._subconta_dex.create_order(self.trading_symbol, "market", close_side, amount, current_price, {"reduceOnly": True})
            
            # Limpar estado
            self._position_entry_time = None
            self._last_pos_side = None
            self._entry_price = None  # Limpar pre√ßo de entrada
            
            # Notificar
            self._notify_trade("close", side, current_price, amount, "Fechamento", include_hl=False)
            self._log(f"üö™ POSI√á√ÉO FECHADA: {side.upper()} {amount:.2f} @ {current_price:.6f}", level="INFO")
            
        except Exception as e:
            self._log(f"Erro fechando posi√ß√£o: {e}", level="ERROR")
            
    def _calculate_stop_price(self, entry_price: float, side: str) -> Optional[float]:
        """Calcula pre√ßo do stop loss baseado em 20% de perda"""
        try:
            if side == "buy":
                # LONG: stop 20% abaixo
                return entry_price * (1 - self.cfg.STOP_LOSS_PCT)
            else:
                # SHORT: stop 20% acima
                return entry_price * (1 + self.cfg.STOP_LOSS_PCT)
        except:
            return None

    def _norm_side(self, raw: Optional[str]) -> Optional[str]:
        """Normaliza lado da posi√ß√£o"""
        if raw is None:
            return None
        raw_clean = str(raw).lower().strip()
        if raw_clean in ["buy", "long"]:
            return "buy"
        elif raw_clean in ["sell", "short"]:
            return "sell"
        else:
            return raw_clean

    def _notify_trade(self, kind: str, side: Optional[str], price: Optional[float], amount: Optional[float], note: str = "", include_hl: bool = False):
        """Notifica trade com Discord e log local"""
        side_str = side or "?"
        price_str = f"{price:.6f}" if price else "?"
        amount_str = f"{amount:.2f}" if amount else "?"
        
        msg = f"üîî {kind.upper()}: {side_str} {amount_str} @ {price_str}"
        if note:
            msg += f" ({note})"
            
        # Log local
        self._log(msg, level="INFO")
        
        # Notifica√ß√£o Discord
        if price and amount and side:
            try:
                if kind.lower() == "open":
                    discord_notifier.notify_trade_open(
                        symbol=self.symbol,
                        side=side,
                        price=price,
                        amount=amount,
                        reason=note
                    )
                elif kind.lower() == "close":
                    # Tentar calcular P&L se poss√≠vel
                    pnl_pct = None
                    if hasattr(self, '_entry_price') and self._entry_price:
                        if side.lower() == "buy":
                            pnl_pct = (price - self._entry_price) / self._entry_price * 100
                        else:
                            pnl_pct = (self._entry_price - price) / self._entry_price * 100
                    
                    discord_notifier.notify_trade_close(
                        symbol=self.symbol,
                        side=side,
                        price=price,
                        amount=amount,
                        pnl_pct=pnl_pct,
                        reason=note
                    )
            except Exception as e:
                self._log(f"Erro enviando notifica√ß√£o Discord: {e}", level="WARN")

    def _preco_atual(self) -> float:
        """Obt√©m pre√ßo atual do ativo"""
        try:
            cache_key = f"ticker_{self.trading_symbol}"
            t = _get_cached_api_call(cache_key, self._subconta_dex.fetch_ticker, self.trading_symbol)
            return float(t.get('last', 0))
        except Exception as e:
            self._log(f"Erro obtendo pre√ßo atual: {e}", level="WARN")
            return 0.0

    def _posicao_aberta(self, force_fresh: bool = False) -> Optional[Dict[str, Any]]:
        """Verifica se h√° posi√ß√£o aberta"""
        try:
            cache_key = f"positions_{self.trading_symbol}"
            
            if force_fresh:
                pos = self._subconta_dex.fetch_positions([self.trading_symbol])  # Opera na subconta
            else:
                pos = _get_cached_api_call(cache_key, self._subconta_dex.fetch_positions, [self.trading_symbol])  # Opera na subconta
            
            if pos and len(pos) > 0:
                return pos[0]  # Retorna primeira posi√ß√£o
            return None
        except Exception as e:
            # Verificar se √© erro de autentica√ß√£o, credenciais ou mercado n√£o dispon√≠vel
            error_msg = str(e).lower()
            if any(x in error_msg for x in ['user parameter', 'wallet address', 'authentication', 'credential']):
                # Erro de credenciais - log discreto DEBUG
                self._log(f"üí§ Sem credenciais para verificar posi√ß√µes", level="DEBUG")
            elif 'does not have market symbol' in error_msg:
                # Mercado n√£o dispon√≠vel - log discreto DEBUG  
                self._log(f"üí§ Mercado {self.trading_symbol} n√£o listado na exchange", level="DEBUG")
            else:
                # Outros erros realmente problem√°ticos - manter WARN
                self._log(f"Erro verificando posi√ß√£o: {e}", level="WARN")
            return None

# ===== FUN√á√ÉO PRINCIPAL DE BUILD DE DADOS =====
def build_df(symbol: str = "BTCUSDT", tf: str = "15m", limit: int = 260, source: str = "auto") -> pd.DataFrame:
    """Constr√≥i DataFrame com dados de mercado (simplificado)"""
    try:
        _log_global("DATA", f"Iniciando build_df symbol={symbol} tf={tf} alvo={limit}", "INFO")
        
        # Usar Binance via ccxt como fonte principal
        exchange = ccxt.binance({
            'sandbox': False,
            'options': {'defaultType': 'spot'}
        })
        
        # Buscar dados
        ohlcv = exchange.fetch_ohlcv(symbol, tf, limit=limit)
        
        if not ohlcv:
            raise MarketDataUnavailable(f"Nenhum dado dispon√≠vel para {symbol}")
        
        # Converter para DataFrame
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        # Renomear colunas para compatibilidade
        df = df.rename(columns={
            'open': 'valor_abertura',
            'high': 'valor_alta', 
            'low': 'valor_baixa',
            'close': 'valor_fechamento',
            'volume': 'volume'
        })
        
        _log_global("DATA", f"Total candles retornados: {len(df)}", "INFO")
        return df
        
    except Exception as e:
        _log_global("DATA", f"Erro no build_df: {e}", "ERROR")
        raise MarketDataUnavailable(f"Erro obtendo dados para {symbol}: {e}")

# ===== FUN√á√ÉO PRINCIPAL DO SISTEMA =====
def main():
    """Fun√ß√£o principal do sistema de trading simplificado"""
    # Configurar arquivo de log
    setup_log_file()
    
    print("üöÄ SISTEMA DE TRADING SIMPLIFICADO - SimpleRatioStrategy")
    print("üìä Assets: PUMPUSDT, AVNTUSDT (dados) ‚Üí PUMP/USDC:USDC, AVNT/USDC:USDC (trading)")
    print("üí∞ Trade size: $3 USD, Leverage: 10x, Stop: 20%")
    print("‚ö° Estrat√©gia: Entradas/sa√≠das por invers√£o de ratio avg_buy/sell")
    print("üîÑ Execu√ß√£o cont√≠nua a cada 30 segundos")
    
    # Verificar vari√°veis de ambiente
    wallet_address = os.getenv("WALLET_ADDRESS")
    private_key = os.getenv("HYPERLIQUID_PRIVATE_KEY")
    subaccount = os.getenv("HYPERLIQUID_SUBACCOUNT")
    
    print("\nüîß CONFIGURA√á√ÉO DE AMBIENTE:")
    print(f"   üìã Wallet Address: {'‚úÖ Configurado' if wallet_address else '‚ùå N√£o configurado'}")
    print(f"   üîê Private Key: {'‚úÖ Configurado' if private_key else '‚ùå N√£o configurado'}")
    print(f"   üè¶ Subaccount: {'‚úÖ ' + subaccount if subaccount else '‚ùå N√£o configurado'}")
    
    if not wallet_address or not private_key:
        print("\n‚ö†Ô∏è  MODO DEMONSTRA√á√ÉO: Algumas credenciais n√£o est√£o configuradas")
        print("   Para opera√ß√£o completa, configure as vari√°veis de ambiente:")
        print("   - WALLET_ADDRESS")
        print("   - HYPERLIQUID_PRIVATE_KEY")
        print("   - HYPERLIQUID_SUBACCOUNT (opcional)")
    print()
    
    # Configura√ß√£o
    cfg = SimpleRatioConfig()
    
    # Usar configura√ß√£o baseada em vari√°veis de ambiente
    wallet_config = get_wallet_config()
    dex = wallet_config.get_dex_instance()
    
    print(f"üè¶ Usando carteira: {wallet_config.name}")
    print()
    
    # Criar estrat√©gias uma vez s√≥ (para preservar hist√≥rico)
    print("üéØ Inicializando estrat√©gias...")
    strategies = {}
    for symbol in cfg.ASSETS:
        strategies[symbol] = SimpleRatioStrategy(dex, symbol, cfg, wallet_config=wallet_config)
        print(f"    ‚úÖ Estrat√©gia criada para {symbol}")
    print()
    
    cycle_count = 0
    
    # Loop cont√≠nuo
    while True:
        try:
            cycle_count += 1
            print(f"\nüîÑ CICLO #{cycle_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Loop principal para cada asset
            for symbol in cfg.ASSETS:
                try:
                    print(f"üîç Processando {symbol}...")
                    
                    # Buscar dados com timeout de debug
                    start_time = time.time()
                    print(f"    üìä Buscando dados de {symbol}...")
                    df = build_df(symbol, "15m", 100)
                    data_time = time.time() - start_time
                    print(f"    ‚úÖ Dados obtidos em {data_time:.2f}s ({len(df)} candles)")
                    
                    # Usar estrat√©gia existente (preservando hist√≥rico)
                    strategy = strategies[symbol]
                    
                    # Executar step
                    print(f"    üöÄ Executando step...")
                    step_start = time.time()
                    strategy.step(df)
                    step_time = time.time() - step_start
                    print(f"    ‚úÖ Step executado em {step_time:.2f}s")
                    
                except Exception as e:
                    _log_global("MAIN", f"Erro processando {symbol}: {e}", "ERROR")
                    print(f"    ‚ùå Erro: {e}")
            
            print("‚úÖ Ciclo completo!")
            print(f"‚è∞ Aguardando 30 segundos para pr√≥ximo ciclo...")
            time.sleep(30)
            
        except KeyboardInterrupt:
            print("\nüõë Trading interrompido pelo usu√°rio!")
            break
        except Exception as e:
            _log_global("MAIN", f"Erro no loop principal: {e}", "ERROR")
            print(f"‚ùå Erro no ciclo, aguardando 30s antes de tentar novamente...")
            time.sleep(30)

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "--testar-entrada-hyperliquid":
        import ccxt
        print("[TESTE] Simulando entrada real na Hyperliquid com AVNT/USDC:USDC...")
        WALLET_ADDRESS = '0x08183aa09eF03Cf8475D909F507606F5044cBdAB'
        HYPERLIQUID_SUBACCOUNT = '0x5ff0f14d577166f9ede3d9568a423166be61ea9d'
        exchange = ccxt.hyperliquid({
            'privateKey': '0xa524295ceec3e792d9aaa18b026dbc9ca74af350117631235ec62dcbe24bc405',
            'walletAddress': WALLET_ADDRESS,  # Vault = WALLET_ADDRESS
            'subaccount': HYPERLIQUID_SUBACCOUNT, # Subconta correta
            'enableRateLimit': True,
            'options': {
                'vaultAddress': WALLET_ADDRESS, # Garantir que vault √© igual ao WALLET_ADDRESS
                'defaultSlippage': 0.01  # 1% slippage apertado
            }
        })
        symbol = 'AVNT/USDC:USDC'
        markets = exchange.load_markets()
        ticker = exchange.fetch_ticker(symbol)
        preco = ticker['last']
        print(f'[TESTE] Pre√ßo atual de {symbol}:', preco)
        leverage = 5
        valor_minimo = 10.10
        contract_size = markets[symbol]['contractSize'] if 'contractSize' in markets[symbol] else 1.0
        quantidade = round(valor_minimo / (preco * contract_size), 3)
        valor_total = quantidade * preco * contract_size
        print(f'[TESTE] Quantidade calculada: {quantidade} | Valor total: ${valor_total:.2f} | Pre√ßo: {preco} | ContractSize: {contract_size}')
        try:
            order = exchange.create_order(
                symbol, 'market', 'buy', quantidade, preco,
                params={"leverage": leverage}
            )
            print('[TESTE] Ordem criada:', order)
        except Exception as e:
            print('[TESTE] Erro ao criar ordem:', e)
    else:
        main()
