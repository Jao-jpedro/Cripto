#!/usr/bin/env python3
"""
Verifica√ß√£o de Leverage no trading.py
Confirma se todas as configura√ß√µes est√£o corretas
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verificar_configuracao_leverage():
    """Verifica se a configura√ß√£o de leverage est√° correta"""
    
    print("üîç VERIFICA√á√ÉO COMPLETA DE LEVERAGE - trading.py")
    print("="*60)
    print()
    
    try:
        # Importar a classe de configura√ß√£o
        from trading import GradientConfig
        
        cfg = GradientConfig()
        
        print("‚úÖ CONFIGURA√á√ÉO PRINCIPAL:")
        print(f"   LEVERAGE: {cfg.LEVERAGE}x")
        print(f"   STOP_LOSS_CAPITAL_PCT: {cfg.STOP_LOSS_CAPITAL_PCT*100:.1f}%")
        print(f"   TAKE_PROFIT_CAPITAL_PCT: {cfg.TAKE_PROFIT_CAPITAL_PCT*100:.1f}%")
        print()
        
        print("üßÆ C√ÅLCULOS DERIVADOS:")
        sl_price_pct = (cfg.STOP_LOSS_CAPITAL_PCT / cfg.LEVERAGE) * 100
        tp_price_pct = (cfg.TAKE_PROFIT_CAPITAL_PCT / cfg.LEVERAGE) * 100
        print(f"   SL pre√ßo: {sl_price_pct:.2f}% ({cfg.STOP_LOSS_CAPITAL_PCT*100:.1f}% ROI √∑ {cfg.LEVERAGE}x)")
        print(f"   TP pre√ßo: {tp_price_pct:.2f}% ({cfg.TAKE_PROFIT_CAPITAL_PCT*100:.1f}% ROI √∑ {cfg.LEVERAGE}x)")
        print()
        
        print("üåç VARI√ÅVEIS DE AMBIENTE:")
        env_leverage = os.getenv("LEVERAGE", "3")
        print(f"   LEVERAGE env: {env_leverage}x (padr√£o: 3x)")
        print()
        
        if cfg.LEVERAGE == 3 and env_leverage == "3":
            print("‚úÖ CONFIGURA√á√ÉO CORRETA!")
            print("   Leverage uniformemente configurado em 3x")
        else:
            print("‚ö†Ô∏è  POSS√çVEL INCONSIST√äNCIA:")
            print(f"   cfg.LEVERAGE: {cfg.LEVERAGE}x")
            print(f"   env LEVERAGE: {env_leverage}x")
        
        print()
        print("üìä IMPACTO NO SISTEMA:")
        print("   ‚Ä¢ Todas as posi√ß√µes devem abrir com 3x leverage")
        print("   ‚Ä¢ SL em 0.5% movimento de pre√ßo")
        print("   ‚Ä¢ TP em 4.0% movimento de pre√ßo")
        print("   ‚Ä¢ ROI amplificado 3x nos trades")
        
    except Exception as e:
        print(f"‚ùå ERRO na verifica√ß√£o: {e}")
        print("   Verificar se trading.py est√° acess√≠vel")

def verificar_problemas_potenciais():
    """Identifica poss√≠veis problemas"""
    
    print("\n" + "="*60)
    print("üö® DIAGN√ìSTICO DE PROBLEMAS POTENCIAIS")
    print("="*60)
    print()
    
    problemas = [
        "1. üîÑ Posi√ß√µes j√° abertas com leverage antigo",
        "2. üìä Cache do exchange com configura√ß√£o anterior", 
        "3. üéØ Configura√ß√£o manual da conta Hyperliquid",
        "4. ‚è±Ô∏è Ordens pendentes com leverage incorreto",
        "5. üîß M√∫ltiplas inst√¢ncias rodando simultaneamente"
    ]
    
    print("POSS√çVEIS CAUSAS DE LEVERAGE INCORRETO:")
    for problema in problemas:
        print(f"   {problema}")
    
    print()
    print("üí° A√á√ïES RECOMENDADAS:")
    print("   1. ‚úÖ Fechar todas as posi√ß√µes abertas")
    print("   2. ‚úÖ Cancelar todas as ordens pendentes") 
    print("   3. ‚úÖ Parar todas as inst√¢ncias do trading")
    print("   4. ‚úÖ Verificar configura√ß√£o no Hyperliquid")
    print("   5. ‚úÖ Reiniciar sistema com configura√ß√£o limpa")
    print("   6. ‚úÖ Monitorar primeiras posi√ß√µes para confirmar 3x")

def main():
    verificar_configuracao_leverage()
    verificar_problemas_potenciais()
    
    print("\n" + "="*60)
    print("üéØ CONCLUS√ÉO")
    print("="*60)
    print("‚úÖ trading.py configurado corretamente para leverage 3x")
    print("‚ö†Ô∏è  Se ainda houver problemas, verificar estado do exchange")
    print("üîÑ Reinicializa√ß√£o completa pode ser necess√°ria")

if __name__ == "__main__":
    main()
