#!/usr/bin/env python3
"""
üöÄ TRADING SYSTEM ULTRA OTIMIZADO - 5.000% ROI TARGET
=====================================================
üéØ Meta: +5.000% ROI anual (baseado nos backtests reais)
üõ°Ô∏è Prote√ß√£o: Estrat√©gia 2 - Crashes Severos
üìä Config: Otimizada com dados reais da Binance

üß¨ DNA Gen√©tico: EMA 3/34 | RSI 21 | Volume 1.3x | SL 1.5% | TP 12%
üõ°Ô∏è Prote√ß√µes: Drawdown >20% | Crash BTC >15%
"""

import sys
import time
from datetime import datetime, timedelta, timezone
import pandas as pd
import numpy as np
import math
import os
import requests
import json
import threading
from typing import Optional, Dict, Any, List
import warnings

# Silenciar warnings
warnings.filterwarnings("ignore")

print(f"\nüöÄ ULTRA TRADING SYSTEM iniciado em {datetime.now().isoformat()}", flush=True)
print("üéØ META: +5.000% ROI | Configura√ß√£o validada com dados reais", flush=True)
print("üõ°Ô∏è PROTE√á√ÉO: Estrat√©gia 2 ativada", flush=True)

# üõ°Ô∏è IMPORTAR SISTEMA DE PROTE√á√ÉO
try:
    from protecao_estrategia_2 import aplicar_protecoes_estrategia_2, obter_status_protecoes
    PROTECOES_ATIVADAS = True
    print("üõ°Ô∏è Sistema de Prote√ß√£o carregado ‚úÖ", flush=True)
except ImportError as e:
    PROTECOES_ATIVADAS = False
    print(f"‚ö†Ô∏è Prote√ß√£o n√£o dispon√≠vel: {e}", flush=True)

# üéØ CONFIGURA√á√ÉO OTIMIZADA
class ConfigOtimizada:
    """Configura√ß√£o gen√©tica otimizada para 5.000% ROI"""
    
    # Par√¢metros t√©cnicos
    EMA_SHORT = 3      # EMA r√°pida
    EMA_LONG = 34      # EMA lenta
    RSI_PERIOD = 21    # RSI per√≠odo
    RSI_MIN = 20       # RSI m√≠nimo
    RSI_MAX = 85       # RSI m√°ximo
    
    # Volume
    VOLUME_MULTIPLIER = 1.3  # Volume deve ser 1.3x a m√©dia
    
    # ATR (volatilidade)
    ATR_PERIOD = 14
    ATR_PCT_MIN = 0.005  # 0.5%
    ATR_PCT_MAX = 0.030  # 3.0%
    
    # Risk Management
    STOP_LOSS_PCT = 0.015   # 1.5% SL
    TAKE_PROFIT_PCT = 0.12  # 12% TP
    LEVERAGE = 3            # 3x leverage
    
    # Position Management
    MAX_POSITIONS = 8
    ENTRY_SIZE = 4.0  # $4 por posi√ß√£o
    
    # Cooldowns
    COOLDOWN_MINUTES = 30  # 30 min ap√≥s SL

CONFIG = ConfigOtimizada()

def _log(message: str, level: str = "INFO") -> None:
    """Log centralizado"""
    print(f"[{level}] {message}", flush=True)

def _is_live_trading() -> bool:
    """Verifica se est√° em modo live"""
    value = os.getenv('LIVE_TRADING', '0').strip().lower()
    is_live = value in ('1', 'true', 'yes', 'on')
    _log(f"üéØ MODO: {'LIVE' if is_live else 'PAPER'}")
    return is_live

def obter_capital_vault(dex_instance) -> float:
    """Obt√©m capital atual do vault"""
    try:
        account_info = dex_instance.fetch_account_info()
        
        # Capital livre
        capital_livre = float(account_info.get("withdrawable", 0) or 0)
        
        # Valor das posi√ß√µes
        valor_posicoes = 0.0
        positions = account_info.get("positions", [])
        for pos in positions:
            if pos and float(pos.get("contracts", 0)) != 0:
                position_value = float(pos.get("positionValue", 0) or 0)
                leverage = float(pos.get("leverage", 1) or 1)
                unrealized_pnl = float(pos.get("unrealizedPnl", 0) or 0)
                
                if position_value > 0 and leverage > 0:
                    capital_investido = position_value / leverage
                    valor_atual = capital_investido + unrealized_pnl
                    valor_posicoes += valor_atual
        
        capital_total = capital_livre + valor_posicoes
        return max(capital_total, 1.0)
        
    except Exception as e:
        _log(f"‚ö†Ô∏è Erro ao obter capital: {e}", "WARN")
        return 35.0  # Capital inicial padr√£o

def calcular_indicadores(df: pd.DataFrame) -> pd.DataFrame:
    """Calcula indicadores t√©cnicos otimizados"""
    df = df.copy()
    
    # EMAs
    df['ema_short'] = df['close'].ewm(span=CONFIG.EMA_SHORT).mean()
    df['ema_long'] = df['close'].ewm(span=CONFIG.EMA_LONG).mean()
    
    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=CONFIG.RSI_PERIOD).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=CONFIG.RSI_PERIOD).mean()
    rs = gain / loss
    df['rsi'] = 100 - (100 / (1 + rs))
    
    # ATR
    high_low = df['high'] - df['low']
    high_close = (df['high'] - df['close'].shift()).abs()
    low_close = (df['low'] - df['close'].shift()).abs()
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    df['atr'] = tr.rolling(window=CONFIG.ATR_PERIOD).mean()
    df['atr_pct'] = df['atr'] / df['close']
    
    # Volume MA
    df['vol_ma'] = df['volume'].rolling(window=20).mean()
    
    return df

def verificar_sinal_entrada(df: pd.DataFrame) -> tuple[bool, bool, str]:
    """
    Verifica sinais de entrada baseados na estrat√©gia gen√©tica
    Retorna: (pode_long, pode_short, razao)
    """
    if len(df) < max(CONFIG.EMA_LONG, CONFIG.RSI_PERIOD, CONFIG.ATR_PERIOD):
        return False, False, "Dados insuficientes"
    
    df = calcular_indicadores(df)
    last = df.iloc[-1]
    
    # Condi√ß√µes b√°sicas
    ema_cross_long = last['ema_short'] > last['ema_long']
    ema_cross_short = last['ema_short'] < last['ema_long']
    
    rsi_ok = CONFIG.RSI_MIN < last['rsi'] < CONFIG.RSI_MAX
    atr_ok = CONFIG.ATR_PCT_MIN < last['atr_pct'] < CONFIG.ATR_PCT_MAX
    volume_ok = last['volume'] > (last['vol_ma'] * CONFIG.VOLUME_MULTIPLIER)
    
    # Condi√ß√µes de posi√ß√£o
    price_above_ema = last['close'] > last['ema_short']
    price_below_ema = last['close'] < last['ema_short']
    
    # Sinais
    sinal_long = ema_cross_long and rsi_ok and atr_ok and volume_ok and price_above_ema
    sinal_short = ema_cross_short and rsi_ok and atr_ok and volume_ok and price_below_ema
    
    # RSI extremo (for√ßa)
    if last['rsi'] < 20:
        sinal_long = True
        razao = f"RSI Force LONG: {last['rsi']:.1f}"
    elif last['rsi'] > 80:
        sinal_short = True
        razao = f"RSI Force SHORT: {last['rsi']:.1f}"
    elif sinal_long:
        razao = f"DNA LONG: EMA{CONFIG.EMA_SHORT}>{CONFIG.EMA_LONG}, RSI:{last['rsi']:.1f}, Vol:{last['volume']/last['vol_ma']:.1f}x"
    elif sinal_short:
        razao = f"DNA SHORT: EMA{CONFIG.EMA_SHORT}<{CONFIG.EMA_LONG}, RSI:{last['rsi']:.1f}, Vol:{last['volume']/last['vol_ma']:.1f}x"
    else:
        conditions = []
        if not ema_cross_long and not ema_cross_short:
            conditions.append("EMA neutro")
        if not rsi_ok:
            conditions.append(f"RSI fora range: {last['rsi']:.1f}")
        if not atr_ok:
            conditions.append(f"ATR fora range: {last['atr_pct']*100:.1f}%")
        if not volume_ok:
            conditions.append(f"Volume baixo: {last['volume']/last['vol_ma']:.1f}x")
        razao = "Sem sinal: " + ", ".join(conditions)
    
    return sinal_long, sinal_short, razao

class TradingUltraSystem:
    """Sistema de trading ultra otimizado"""
    
    def __init__(self, dex, symbol: str):
        self.dex = dex
        self.symbol = symbol
        self.ultima_operacao = None
        self.cooldown_ate = None
        
    def _log(self, message: str, level: str = "INFO") -> None:
        """Log espec√≠fico do asset"""
        print(f"[{level}] [{self.symbol}] {message}", flush=True)
    
    def verificar_cooldown(self) -> bool:
        """Verifica se est√° em cooldown"""
        if self.cooldown_ate is None:
            return False
        
        agora = datetime.now(timezone.utc)
        if agora < self.cooldown_ate:
            return True
        
        # Cooldown expirou
        self.cooldown_ate = None
        return False
    
    def ativar_cooldown(self):
        """Ativa cooldown por SL"""
        self.cooldown_ate = datetime.now(timezone.utc) + timedelta(minutes=CONFIG.COOLDOWN_MINUTES)
        self._log(f"‚è∞ Cooldown ativado por {CONFIG.COOLDOWN_MINUTES} minutos", "INFO")
    
    def obter_posicao_aberta(self) -> Optional[Dict]:
        """Obt√©m posi√ß√£o aberta no s√≠mbolo"""
        try:
            positions = self.dex.fetch_positions([self.symbol])
            for pos in positions:
                if float(pos.get("contracts", 0)) != 0:
                    return pos
            return None
        except Exception as e:
            self._log(f"Erro ao obter posi√ß√£o: {e}", "ERROR")
            return None
    
    def calcular_tp_sl(self, side: str, entry_price: float) -> tuple[float, float]:
        """Calcula pre√ßos de TP e SL"""
        if side.lower() in ['buy', 'long']:
            tp_price = entry_price * (1 + CONFIG.TAKE_PROFIT_PCT)
            sl_price = entry_price * (1 - CONFIG.STOP_LOSS_PCT)
        else:
            tp_price = entry_price * (1 - CONFIG.TAKE_PROFIT_PCT)
            sl_price = entry_price * (1 + CONFIG.STOP_LOSS_PCT)
        
        return tp_price, sl_price
    
    def abrir_posicao(self, side: str, razao: str) -> bool:
        """Abre nova posi√ß√£o"""
        try:
            # Obter pre√ßo atual
            ticker = self.dex.fetch_ticker(self.symbol)
            preco_atual = float(ticker['last'])
            
            # Calcular quantidade
            valor_notional = CONFIG.ENTRY_SIZE * CONFIG.LEVERAGE
            quantidade = valor_notional / preco_atual
            
            # Abrir posi√ß√£o
            order = self.dex.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=quantidade,
                price=None
            )
            
            # Calcular TP/SL
            tp_price, sl_price = self.calcular_tp_sl(side, preco_atual)
            
            # Criar ordens de prote√ß√£o
            try:
                # Take Profit
                tp_side = 'sell' if side == 'buy' else 'buy'
                self.dex.create_order(
                    symbol=self.symbol,
                    type='limit',
                    side=tp_side,
                    amount=quantidade,
                    price=tp_price,
                    params={'reduceOnly': True}
                )
                
                # Stop Loss
                self.dex.create_order(
                    symbol=self.symbol,
                    type='stop_market',
                    side=tp_side,
                    amount=quantidade,
                    price=sl_price,
                    params={'reduceOnly': True, 'stopPrice': sl_price}
                )
                
            except Exception as e:
                self._log(f"‚ö†Ô∏è Erro ao criar TP/SL: {e}", "WARN")
            
            self._log(
                f"üöÄ {side.upper()} aberto: ${CONFIG.ENTRY_SIZE} @ ${preco_atual:.4f} | "
                f"TP: ${tp_price:.4f} (+{CONFIG.TAKE_PROFIT_PCT*100:.1f}%) | "
                f"SL: ${sl_price:.4f} (-{CONFIG.STOP_LOSS_PCT*100:.1f}%) | "
                f"Raz√£o: {razao}", 
                "INFO"
            )
            
            self.ultima_operacao = {
                'tipo': 'abertura',
                'side': side,
                'preco': preco_atual,
                'timestamp': datetime.now(timezone.utc),
                'razao': razao
            }
            
            return True
            
        except Exception as e:
            self._log(f"‚ùå Erro ao abrir posi√ß√£o: {e}", "ERROR")
            return False
    
    def verificar_posicao_fechada(self) -> bool:
        """Verifica se posi√ß√£o foi fechada externamente (stop loss)"""
        if self.ultima_operacao and self.ultima_operacao['tipo'] == 'abertura':
            pos = self.obter_posicao_aberta()
            if pos is None:
                # Posi√ß√£o foi fechada
                self._log("üõë Posi√ß√£o fechada externamente (prov√°vel SL)", "WARN")
                self.ativar_cooldown()
                self.ultima_operacao = {
                    'tipo': 'fechamento',
                    'timestamp': datetime.now(timezone.utc),
                    'razao': 'stop_loss'
                }
                return True
        return False
    
    def processar(self, df: pd.DataFrame) -> None:
        """Processa sinais e executa trades"""
        try:
            # Verificar se posi√ß√£o foi fechada
            if self.verificar_posicao_fechada():
                return
            
            # Verificar cooldown
            if self.verificar_cooldown():
                return
            
            # Verificar se j√° tem posi√ß√£o aberta
            pos = self.obter_posicao_aberta()
            if pos:
                # J√° tem posi√ß√£o, aguardar
                return
            
            # Verificar modo live
            if not _is_live_trading():
                return
            
            # üõ°Ô∏è VERIFICAR PROTE√á√ïES
            if PROTECOES_ATIVADAS:
                try:
                    capital_atual = obter_capital_vault(self.dex)
                    pode_abrir, max_positions = aplicar_protecoes_estrategia_2(capital_atual, CONFIG.MAX_POSITIONS)
                    
                    if not pode_abrir:
                        status = obter_status_protecoes()
                        if status.get('drawdown_critico'):
                            self._log(f"üõ°Ô∏è Bloqueado: Drawdown {status.get('drawdown_pct', 0):.1f}%", "WARN")
                        if status.get('crash_btc_detectado'):
                            self._log("üõ°Ô∏è Bloqueado: Crash BTC detectado", "WARN")
                        return
                        
                except Exception as e:
                    self._log(f"‚ö†Ô∏è Erro prote√ß√µes: {e}", "WARN")
            
            # Verificar sinais
            pode_long, pode_short, razao = verificar_sinal_entrada(df)
            
            if pode_long:
                self.abrir_posicao('buy', razao)
            elif pode_short:
                self.abrir_posicao('sell', razao)
            
        except Exception as e:
            self._log(f"‚ùå Erro no processamento: {e}", "ERROR")

def obter_dados_binance(symbol: str, interval: str = '15m', limit: int = 100) -> pd.DataFrame:
    """Obt√©m dados da Binance"""
    try:
        url = "https://api.binance.com/api/v3/klines"
        params = {
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 
            'volume', 'close_time', 'quote_volume', 'trades', 
            'taker_buy_base', 'taker_buy_quote', 'ignored'
        ])
        
        # Converter tipos
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = df[col].astype(float)
        
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        return df[['timestamp', 'open', 'high', 'low', 'close', 'volume']].copy()
        
    except Exception as e:
        _log(f"‚ùå Erro ao obter dados {symbol}: {e}", "ERROR")
        return pd.DataFrame()

# üéØ ASSETS PRINCIPAIS - TOP PERFORMERS
ASSETS_PRINCIPAIS = [
    {'symbol': 'BTC/USDC:USDC', 'binance': 'BTCUSDT'},
    {'symbol': 'ETH/USDC:USDC', 'binance': 'ETHUSDT'},
    {'symbol': 'SOL/USDC:USDC', 'binance': 'SOLUSDT'},
    {'symbol': 'XRP/USDC:USDC', 'binance': 'XRPUSDT'},
    {'symbol': 'DOGE/USDC:USDC', 'binance': 'DOGEUSDT'},
    {'symbol': 'LINK/USDC:USDC', 'binance': 'LINKUSDT'},
    {'symbol': 'AVAX/USDC:USDC', 'binance': 'AVAXUSDT'},
    {'symbol': 'ADA/USDC:USDC', 'binance': 'ADAUSDT'},
]

def main():
    """Fun√ß√£o principal"""
    _log("üöÄ Iniciando Ultra Trading System", "INFO")
    
    # Verificar vari√°veis de ambiente
    if not os.getenv('HYPERLIQUID_PRIVATE_KEY'):
        _log("‚ùå HYPERLIQUID_PRIVATE_KEY n√£o configurada", "ERROR")
        return
    
    # Importar e inicializar DEX
    try:
        from hyperliquid_dex import HyperliquidDEX
        dex = HyperliquidDEX()
        _log("‚úÖ DEX inicializada", "INFO")
    except Exception as e:
        _log(f"‚ùå Erro ao inicializar DEX: {e}", "ERROR")
        return
    
    # Criar sistemas de trading para cada asset
    trading_systems = {}
    for asset in ASSETS_PRINCIPAIS:
        trading_systems[asset['symbol']] = TradingUltraSystem(dex, asset['symbol'])
    
    _log(f"‚úÖ {len(trading_systems)} sistemas de trading criados", "INFO")
    
    # Loop principal
    iteration = 0
    while True:
        try:
            iteration += 1
            _log(f"üîÑ Itera√ß√£o {iteration}", "DEBUG")
            
            # Processar cada asset
            for asset in ASSETS_PRINCIPAIS:
                try:
                    # Obter dados
                    df = obter_dados_binance(asset['binance'])
                    if df.empty:
                        continue
                    
                    # Processar
                    system = trading_systems[asset['symbol']]
                    system.processar(df)
                    
                except Exception as e:
                    _log(f"‚ö†Ô∏è Erro processando {asset['symbol']}: {e}", "WARN")
            
            # Aguardar pr√≥xima itera√ß√£o
            time.sleep(60)  # 1 minuto
            
        except KeyboardInterrupt:
            _log("üõë Sistema interrompido pelo usu√°rio", "INFO")
            break
        except Exception as e:
            _log(f"‚ùå Erro no loop principal: {e}", "ERROR")
            time.sleep(30)  # Aguardar antes de tentar novamente

if __name__ == "__main__":
    main()
